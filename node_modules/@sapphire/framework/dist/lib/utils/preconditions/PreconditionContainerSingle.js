'use strict';

var pieces = require('@sapphire/pieces');
var result = require('@sapphire/result');
var Identifiers_js = require('../../errors/Identifiers.js');
var UserError_js = require('../../errors/UserError.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var PreconditionContainerSingle = class {
  constructor(data) {
    if (typeof data === "string") {
      this.context = {};
      this.name = data;
    } else {
      this.context = Reflect.get(data, "context") ?? {};
      this.name = data.name;
    }
  }
  messageRun(message, command, context = {}) {
    const precondition = pieces.container.stores.get("preconditions").get(this.name);
    if (precondition) {
      return precondition.messageRun ? precondition.messageRun(message, command, { ...context, ...this.context }) : precondition.error({
        identifier: Identifiers_js.Identifiers.PreconditionMissingMessageHandler,
        message: `The precondition "${precondition.name}" is missing a "messageRun" handler, but it was requested for the "${command.name}" command.`
      });
    }
    return result.err(new UserError_js.UserError({ identifier: Identifiers_js.Identifiers.PreconditionUnavailable, message: `The precondition "${this.name}" is not available.` }));
  }
  chatInputRun(interaction, command, context = {}) {
    const precondition = pieces.container.stores.get("preconditions").get(this.name);
    if (precondition) {
      return precondition.chatInputRun ? precondition.chatInputRun(interaction, command, { ...context, ...this.context }) : precondition.error({
        identifier: Identifiers_js.Identifiers.PreconditionMissingChatInputHandler,
        message: `The precondition "${precondition.name}" is missing a "chatInputRun" handler, but it was requested for the "${command.name}" command.`
      });
    }
    return result.err(new UserError_js.UserError({ identifier: Identifiers_js.Identifiers.PreconditionUnavailable, message: `The precondition "${this.name}" is not available.` }));
  }
  contextMenuRun(interaction, command, context = {}) {
    const precondition = pieces.container.stores.get("preconditions").get(this.name);
    if (precondition) {
      return precondition.contextMenuRun ? precondition.contextMenuRun(interaction, command, { ...context, ...this.context }) : precondition.error({
        identifier: Identifiers_js.Identifiers.PreconditionMissingContextMenuHandler,
        message: `The precondition "${precondition.name}" is missing a "contextMenuRun" handler, but it was requested for the "${command.name}" command.`
      });
    }
    return result.err(new UserError_js.UserError({ identifier: Identifiers_js.Identifiers.PreconditionUnavailable, message: `The precondition "${this.name}" is not available.` }));
  }
};
__name(PreconditionContainerSingle, "PreconditionContainerSingle");

exports.PreconditionContainerSingle = PreconditionContainerSingle;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=PreconditionContainerSingle.js.map