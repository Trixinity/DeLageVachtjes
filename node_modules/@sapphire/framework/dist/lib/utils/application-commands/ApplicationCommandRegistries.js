'use strict';

var pieces = require('@sapphire/pieces');
var Enums_js = require('../../types/Enums.js');
var ApplicationCommandRegistry_js = require('./ApplicationCommandRegistry.js');
var emitRegistryError_js = require('./emitRegistryError.js');
var getNeededParameters_js = require('./getNeededParameters.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
exports.defaultBehaviorWhenNotIdentical = Enums_js.RegisterBehavior.Overwrite;
var registries = /* @__PURE__ */ new Map();
var allGuildIdsToFetchCommandsFor = /* @__PURE__ */ new Set();
function acquire(commandName) {
  const existing = registries.get(commandName);
  if (existing) {
    return existing;
  }
  const newRegistry = new ApplicationCommandRegistry_js.ApplicationCommandRegistry(commandName);
  registries.set(commandName, newRegistry);
  return newRegistry;
}
__name(acquire, "acquire");
function setDefaultBehaviorWhenNotIdentical(behavior) {
  exports.defaultBehaviorWhenNotIdentical = behavior ?? Enums_js.RegisterBehavior.Overwrite;
}
__name(setDefaultBehaviorWhenNotIdentical, "setDefaultBehaviorWhenNotIdentical");
function getDefaultBehaviorWhenNotIdentical() {
  return exports.defaultBehaviorWhenNotIdentical;
}
__name(getDefaultBehaviorWhenNotIdentical, "getDefaultBehaviorWhenNotIdentical");
async function handleRegistryAPICalls() {
  const commandStore = pieces.container.stores.get("commands");
  for (const command of commandStore.values()) {
    if (command.registerApplicationCommands) {
      try {
        await command.registerApplicationCommands(command.applicationCommandRegistry);
      } catch (error) {
        emitRegistryError_js.emitRegistryError(error, command);
      }
    }
  }
  const { applicationCommands, globalCommands, guildCommands } = await getNeededParameters_js.getNeededRegistryParameters(allGuildIdsToFetchCommandsFor);
  for (const registry of registries.values()) {
    await registry["runAPICalls"](applicationCommands, globalCommands, guildCommands);
    const piece = registry.command;
    if (piece) {
      for (const nameOrId of piece.applicationCommandRegistry.chatInputCommands) {
        commandStore.aliases.set(nameOrId, piece);
      }
      for (const nameOrId of piece.applicationCommandRegistry.contextMenuCommands) {
        commandStore.aliases.set(nameOrId, piece);
      }
    }
  }
}
__name(handleRegistryAPICalls, "handleRegistryAPICalls");

exports.acquire = acquire;
exports.allGuildIdsToFetchCommandsFor = allGuildIdsToFetchCommandsFor;
exports.getDefaultBehaviorWhenNotIdentical = getDefaultBehaviorWhenNotIdentical;
exports.handleRegistryAPICalls = handleRegistryAPICalls;
exports.registries = registries;
exports.setDefaultBehaviorWhenNotIdentical = setDefaultBehaviorWhenNotIdentical;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=ApplicationCommandRegistries.js.map