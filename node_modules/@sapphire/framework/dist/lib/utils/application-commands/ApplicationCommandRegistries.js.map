{"version":3,"sources":["../../../../src/lib/utils/application-commands/ApplicationCommandRegistries.ts"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB;AAC1B,SAAS,wBAAwB;AACjC,SAAS,kCAAkC;AAC3C,SAAS,yBAAyB;AAClC,SAAS,mCAAmC;AAErC,IAAI,kCAAkC,iBAAiB;AAEvD,IAAM,aAAa,oBAAI,IAAwC;AAE/D,IAAM,gCAAgC,oBAAI,IAAY;AAOtD,SAAS,QAAQ,aAAqB;AAC5C,QAAM,WAAW,WAAW,IAAI,WAAW;AAC3C,MAAI,UAAU;AACb,WAAO;AAAA,EACR;AAEA,QAAM,cAAc,IAAI,2BAA2B,WAAW;AAC9D,aAAW,IAAI,aAAa,WAAW;AAEvC,SAAO;AACR;AAVgB;AAiBT,SAAS,mCAAmC,UAAoC;AACtF,oCAAkC,YAAY,iBAAiB;AAChE;AAFgB;AAIT,SAAS,qCAAqC;AACpD,SAAO;AACR;AAFgB;AAIhB,eAAsB,yBAAyB;AAC9C,QAAM,eAAe,UAAU,OAAO,IAAI,UAAU;AAEpD,aAAW,WAAW,aAAa,OAAO,GAAG;AAC5C,QAAI,QAAQ,6BAA6B;AACxC,UAAI;AACH,cAAM,QAAQ,4BAA4B,QAAQ,0BAA0B;AAAA,MAC7E,SAAS,OAAP;AACD,0BAAkB,OAAO,OAAO;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAEA,QAAM,EAAE,qBAAqB,gBAAgB,cAAc,IAAI,MAAM,4BAA4B,6BAA6B;AAE9H,aAAW,YAAY,WAAW,OAAO,GAAG;AAE3C,UAAM,SAAS,eAAe,qBAAqB,gBAAgB,aAAa;AAEhF,UAAM,QAAQ,SAAS;AAEvB,QAAI,OAAO;AACV,iBAAW,YAAY,MAAM,2BAA2B,mBAAmB;AAC1E,qBAAa,QAAQ,IAAI,UAAU,KAAK;AAAA,MACzC;AAEA,iBAAW,YAAY,MAAM,2BAA2B,qBAAqB;AAC5E,qBAAa,QAAQ,IAAI,UAAU,KAAK;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AACD;AA/BsB","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { RegisterBehavior } from '../../types/Enums';\nimport { ApplicationCommandRegistry } from './ApplicationCommandRegistry';\nimport { emitRegistryError } from './emitRegistryError';\nimport { getNeededRegistryParameters } from './getNeededParameters';\n\nexport let defaultBehaviorWhenNotIdentical = RegisterBehavior.Overwrite;\n\nexport const registries = new Map<string, ApplicationCommandRegistry>();\n\nexport const allGuildIdsToFetchCommandsFor = new Set<string>();\n\n/**\n * Acquires a registry for a command by its name.\n * @param commandName The name of the command.\n * @returns The application command registry for the command\n */\nexport function acquire(commandName: string) {\n\tconst existing = registries.get(commandName);\n\tif (existing) {\n\t\treturn existing;\n\t}\n\n\tconst newRegistry = new ApplicationCommandRegistry(commandName);\n\tregistries.set(commandName, newRegistry);\n\n\treturn newRegistry;\n}\n\n/**\n * Sets the default behavior when registered commands aren't identical to provided data.\n * @param behavior The default behavior to have. Set this to `null` to reset it to the default\n * of `RegisterBehavior.Overwrite`.\n */\nexport function setDefaultBehaviorWhenNotIdentical(behavior?: RegisterBehavior | null) {\n\tdefaultBehaviorWhenNotIdentical = behavior ?? RegisterBehavior.Overwrite;\n}\n\nexport function getDefaultBehaviorWhenNotIdentical() {\n\treturn defaultBehaviorWhenNotIdentical;\n}\n\nexport async function handleRegistryAPICalls() {\n\tconst commandStore = container.stores.get('commands');\n\n\tfor (const command of commandStore.values()) {\n\t\tif (command.registerApplicationCommands) {\n\t\t\ttry {\n\t\t\t\tawait command.registerApplicationCommands(command.applicationCommandRegistry);\n\t\t\t} catch (error) {\n\t\t\t\temitRegistryError(error, command);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst { applicationCommands, globalCommands, guildCommands } = await getNeededRegistryParameters(allGuildIdsToFetchCommandsFor);\n\n\tfor (const registry of registries.values()) {\n\t\t// eslint-disable-next-line @typescript-eslint/dot-notation\n\t\tawait registry['runAPICalls'](applicationCommands, globalCommands, guildCommands);\n\n\t\tconst piece = registry.command;\n\n\t\tif (piece) {\n\t\t\tfor (const nameOrId of piece.applicationCommandRegistry.chatInputCommands) {\n\t\t\t\tcommandStore.aliases.set(nameOrId, piece);\n\t\t\t}\n\n\t\t\tfor (const nameOrId of piece.applicationCommandRegistry.contextMenuCommands) {\n\t\t\t\tcommandStore.aliases.set(nameOrId, piece);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}