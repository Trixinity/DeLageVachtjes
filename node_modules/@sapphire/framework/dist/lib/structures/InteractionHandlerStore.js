'use strict';

var pieces = require('@sapphire/pieces');
var result = require('@sapphire/result');
var Events_js = require('../types/Events.js');
var InteractionHandler_js = require('./InteractionHandler.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var InteractionHandlerStore = class extends pieces.Store {
  constructor() {
    super(InteractionHandler_js.InteractionHandler, { name: "interaction-handlers" });
  }
  async run(interaction) {
    if (this.size === 0)
      return false;
    const promises = [];
    for (const handler of this.values()) {
      const filter = InteractionHandlerFilters.get(handler.interactionHandlerType);
      if (!filter?.(interaction))
        continue;
      const result$1 = await result.Result.fromAsync(() => handler.parse(interaction));
      result$1.match({
        ok: (option) => {
          option.inspect((value) => {
            const promise = result.Result.fromAsync(() => handler.run(interaction, value)).then((res) => res.mapErr((error) => ({ handler, error })));
            promises.push(promise);
          });
        },
        err: (error) => {
          this.container.client.emit(Events_js.Events.InteractionHandlerParseError, error, { interaction, handler });
        }
      });
    }
    if (promises.length === 0)
      return false;
    const results = await Promise.allSettled(promises);
    for (const result of results) {
      const res = result.value;
      res.inspectErr(
        (value) => this.container.client.emit(Events_js.Events.InteractionHandlerError, value.error, { interaction, handler: value.handler })
      );
    }
    return true;
  }
};
__name(InteractionHandlerStore, "InteractionHandlerStore");
var InteractionHandlerFilters = /* @__PURE__ */ new Map([
  [InteractionHandler_js.InteractionHandlerTypes.Button, (interaction) => interaction.isButton()],
  [InteractionHandler_js.InteractionHandlerTypes.SelectMenu, (interaction) => interaction.isSelectMenu()],
  [InteractionHandler_js.InteractionHandlerTypes.ModalSubmit, (interaction) => interaction.isModalSubmit()],
  [InteractionHandler_js.InteractionHandlerTypes.MessageComponent, (interaction) => interaction.isMessageComponent()],
  [InteractionHandler_js.InteractionHandlerTypes.Autocomplete, (Interaction) => Interaction.isAutocomplete()]
]);

exports.InteractionHandlerFilters = InteractionHandlerFilters;
exports.InteractionHandlerStore = InteractionHandlerStore;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=InteractionHandlerStore.js.map