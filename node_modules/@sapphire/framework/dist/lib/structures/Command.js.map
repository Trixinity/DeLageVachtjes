{"version":3,"sources":["../../../src/lib/structures/Command.ts"],"names":["CommandOptionsRunTypeEnum","CommandPreConditions"],"mappings":";;;;AAAA,SAAS,gBAAgB,OAAO,cAAuC;AACvE,SAAS,kBAAwD;AACjE,SAAS,iBAAqD;AAE9D;AAAA,EACC;AAAA,OAOM;AACP,SAAS,YAAY;AACrB,SAAS,mBAAqC;AAC9C,SAAS,eAAe;AAExB,SAAS,yBAAyB;AAClC,SAAS,mCAAmC;AAC5C,SAAS,kCAAoE;AAC7E,SAAS,6BAAuD;AAEzD,IAAM,UAAN,cAA0F,WAAc;AAAA,EA4DvG,YAAY,SAA6B,UAAa,CAAC,GAAQ;AACrE,UAAM,SAAS,EAAE,GAAG,SAAS,OAAO,QAAQ,QAAQ,QAAQ,MAAM,YAAY,EAAE,CAAC;AAflF,SAAgB,6BAA6B,QAAQ,KAAK,IAAI;AAgB7D,SAAK,cAAc,QAAQ,eAAe;AAC1C,SAAK,sBAAsB,QAAQ,uBAAuB;AAC1D,SAAK,WAAW,IAAI,sBAAsB,OAAO;AACjD,SAAK,eAAe,QAAQ,gBAAgB,KAAK,SAAS;AAC1D,SAAK,SAAS,QAAQ,UAAU;AAEhC,SAAK,QAAQ,IAAI,MAAM;AAAA,MACtB,QAAQ,QAAQ,UAAU;AAAA,QACzB,CAAC,KAAK,GAAG;AAAA,QACT,CAAC,UAAK,QAAG;AAAA,QACT,CAAC,UAAK,QAAG;AAAA,QACT,CAAC,QAAK,MAAG;AAAA,MACV;AAAA,IACD,CAAC;AAED,QAAI,QAAQ,yBAAyB;AACpC,YAAM,kBAA4B,CAAC;AACnC,UAAI,KAAK,KAAK,SAAS,GAAG;AAAG,wBAAgB,KAAK,KAAK,KAAK,QAAQ,MAAM,EAAE,CAAC;AAC7E,iBAAW,SAAS,KAAK;AAAS,YAAI,MAAM,SAAS,GAAG;AAAG,0BAAgB,KAAK,MAAM,QAAQ,MAAM,EAAE,CAAC;AAEvG,WAAK,UAAU,CAAC,GAAG,KAAK,SAAS,GAAG,eAAe;AAAA,IACpD;AAEA,QAAI,QAAQ,+BAA+B;AAC1C,YAAM,wBAAkC,CAAC;AACzC,UAAI,KAAK,KAAK,SAAS,GAAG;AAAG,8BAAsB,KAAK,KAAK,KAAK,QAAQ,MAAM,EAAE,CAAC;AACnF,iBAAW,SAAS,KAAK;AAAS,YAAI,MAAM,SAAS,GAAG;AAAG,gCAAsB,KAAK,MAAM,QAAQ,MAAM,EAAE,CAAC;AAE7G,WAAK,UAAU,CAAC,GAAG,KAAK,SAAS,GAAG,qBAAqB;AAAA,IAC1D;AAEA,SAAK,gBAAgB,IAAI,2BAA2B,QAAQ,aAAa;AACzE,SAAK,8BAA8B,OAAO;AAAA,EAC3C;AAAA,EAQO,gBAAgB,SAAkB,YAAoB,SAA+D;AAC3H,UAAM,SAAS,IAAI,OAAO,KAAK,QAAQ;AACvC,UAAM,OAAO,IAAI,eAAe,OAAO,IAAI,KAAK,MAAM,IAAI,UAAU,CAAC,CAAC;AACtE,WAAO,IAAI,KAAK,SAAS,MAAa,MAAM,OAAO;AAAA,EACpD;AAAA,EAUA,IAAW,WAA0B;AACpC,WAAO,KAAK,aAAa,SAAS,IAAI,KAAK,aAAa,KAAK;AAAA,EAC9D;AAAA,EAUA,IAAW,cAA6B;AACvC,WAAO,KAAK,aAAa,SAAS,IAAI,KAAK,aAAa,KAAK;AAAA,EAC9D;AAAA,EAUA,IAAW,iBAAgC;AAC1C,WAAO,KAAK,aAAa,SAAS,IAAI,KAAK,aAAa,KAAK,aAAa,SAAS,KAAK;AAAA,EACzF;AAAA,EAuCgB,SAAsB;AACrC,WAAO;AAAA,MACN,GAAG,MAAM,OAAO;AAAA,MAChB,aAAa,KAAK;AAAA,MAClB,qBAAqB,KAAK;AAAA,MAC1B,UAAU,KAAK;AAAA,IAChB;AAAA,EACD;AAAA,EAWO,0BAAkD;AACxD,WAAO,QAAQ,IAAI,MAAM,YAAY;AAAA,EACtC;AAAA,EAKO,4BAAsD;AAC5D,WAAO,QAAQ,IAAI,MAAM,cAAc;AAAA,EACxC;AAAA,EAKO,8BAA0D;AAChE,WAAO,QAAQ,IAAI,MAAM,gBAAgB;AAAA,EAC1C;AAAA,EAKO,mCAAgE;AACtE,WAAO,QAAQ,IAAI,MAAM,iBAAiB;AAAA,EAC3C;AAAA,EAEA,MAAsB,SAAS;AAE9B,UAAM,QAAQ,KAAK;AACnB,UAAM,WAAW,KAAK;AAEtB,eAAW,YAAY,SAAS,mBAAmB;AAClD,YAAM,eAAe,MAAM,QAAQ,IAAI,QAAQ;AAC/C,UAAI,iBAAiB,MAAM;AAC1B,cAAM,QAAQ,OAAO,QAAQ;AAAA,MAC9B;AAAA,IACD;AAEA,eAAW,YAAY,SAAS,qBAAqB;AACpD,YAAM,eAAe,MAAM,QAAQ,IAAI,QAAQ;AAC/C,UAAI,iBAAiB,MAAM;AAC1B,cAAM,QAAQ,OAAO,QAAQ;AAAA,MAC9B;AAAA,IACD;AAGA,aAAS,kBAAkB,MAAM;AACjC,aAAS,oBAAoB,MAAM;AACnC,aAAS,gBAAgB,MAAM;AAC/B,aAAS,YAAY,SAAS;AAG9B,UAAM,MAAM,OAAO;AAGnB,UAAM,eAAe,MAAM,IAAI,KAAK,IAAI;AAGxC,QAAI,CAAC;AAAc;AAEnB,UAAM,kBAAkB,aAAa;AAErC,QAAI,aAAa,6BAA6B;AAE7C,UAAI;AACH,cAAM,aAAa,4BAA4B,eAAe;AAAA,MAC/D,SAAS,KAAP;AACD,0BAAkB,KAAK,YAAY;AAEnC;AAAA,MACD;AAAA,IACD;AAGA,UAAM,EAAE,qBAAqB,gBAAgB,cAAc,IAAI,MAAM,4BAA4B,gBAAgB,eAAe;AAIhI,UAAM,gBAAgB,eAAe,qBAAqB,gBAAgB,aAAa;AAGvF,eAAW,YAAY,gBAAgB,mBAAmB;AACzD,YAAM,QAAQ,IAAI,UAAU,YAAY;AAAA,IACzC;AAEA,eAAW,YAAY,gBAAgB,qBAAqB;AAC3D,YAAM,QAAQ,IAAI,UAAU,YAAY;AAAA,IACzC;AAAA,EACD;AAAA,EAUU,8BAA8B,SAAgC;AACvE,SAAK,mCAAmC,OAAO;AAC/C,SAAK,kCAAkC,OAAO;AAC9C,SAAK,uDAAuD,OAAO;AACnE,SAAK,qDAAqD,OAAO;AACjE,SAAK,sCAAsC,OAAO;AAAA,EACnD;AAAA,EAMU,kCAAkC,SAA0B;AACrE,QAAI,QAAQ;AAAM,WAAK,cAAc,OAAO,qBAAqB,cAAc;AAAA,EAChF;AAAA,EAQU,mCAAmC,SAA0B;AACtE,UAAM,QAAQ,KAAK,uCAAuC,QAAQ,KAAK;AACvE,QAAI,UAAU;AAAM,WAAK,cAAc,OAAO,KAAY;AAAA,EAC3D;AAAA,EAOU,uDAAuD,SAA0B;AAC1F,UAAM,cAAc,IAAI,YAAY,QAAQ,yBAAyB;AACrE,QAAI,YAAY,aAAa,IAAI;AAChC,WAAK,cAAc,OAAO,EAAE,MAAM,qBAAqB,mBAAmB,SAAS,EAAE,YAAY,EAAE,CAAC;AAAA,IACrG;AAAA,EACD;AAAA,EAOU,qDAAqD,SAA0B;AACxF,UAAM,cAAc,IAAI,YAAY,QAAQ,uBAAuB;AACnE,QAAI,YAAY,aAAa,IAAI;AAChC,WAAK,cAAc,OAAO,EAAE,MAAM,qBAAqB,iBAAiB,SAAS,EAAE,YAAY,EAAE,CAAC;AAAA,IACnG;AAAA,EACD;AAAA,EAOU,sCAAsC,SAA0B;AACzE,UAAM,EAAE,gBAAgB,IAAI,KAAK,UAAU,OAAO;AAKlD,UAAM,WAAW,iBAAiB,kBAAkB,SAAS,KAAK,IAAI,KAAK;AAC3E,UAAM,QAAQ,QAAQ,kBAAkB,WAAW,IAAI,iBAAiB,SAAS;AACjF,UAAM,QAAQ,QAAQ,kBAAkB,WAAW,IAAI,iBAAiB,SAAS;AAEjF,QAAI,SAAS,OAAO;AACnB,YAAM,QAAQ,QAAQ,iBAAiB,iBAAiB,SAAS,YAAY;AAC7E,YAAM,gBAAgB,QAAQ,yBAAyB,iBAAiB;AACxE,WAAK,cAAc,OAAO;AAAA,QACzB,MAAM,qBAAqB;AAAA,QAC3B,SAAS,EAAE,OAAO,OAAO,OAAO,cAAc;AAAA,MAC/C,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEQ,uCAAuC,OAA2F;AACzI,QAAI,UAAU,KAAK;AAAG,aAAO;AAC7B,QAAI,OAAO,UAAU,UAAU;AAC9B,cAAQ,OAAO;AAAA,QACd,KAAK;AACJ,iBAAO,qBAAqB;AAAA,QAC7B,KAAK;AACJ,iBAAO,qBAAqB;AAAA,QAC7B,KAAK;AACJ,iBAAO,qBAAqB;AAAA,QAC7B,KAAK;AACJ,iBAAO,qBAAqB;AAAA,QAC7B,KAAK;AACJ,iBAAO,qBAAqB;AAAA,QAC7B,KAAK;AACJ,iBAAO,qBAAqB;AAAA,QAC7B,KAAK;AACJ,iBAAO,qBAAqB;AAAA,QAC7B,KAAK;AACJ,iBAAO,qBAAqB;AAAA,QAC7B;AACC,iBAAO;AAAA,MACT;AAAA,IACD;AAGA,QAAI,MAAM,WAAW,GAAG;AACvB,YAAM,IAAI,MAAM,GAAG,KAAK,YAAY,QAAQ,KAAK,iDAAiD;AAAA,IACnG;AAEA,QAAI,MAAM,WAAW,GAAG;AACvB,aAAO,KAAK,uCAAuC,MAAM,EAAE;AAAA,IAC5D;AAEA,UAAM,OAAO,IAAI,IAAI,KAAK;AAE1B,UAAM,KAAK,KAAK,IAAI,IAAI;AACxB,UAAM,YAAY,KAAK,IAAI,YAAY;AACvC,UAAM,aAAa,KAAK,IAAI,aAAa;AACzC,UAAM,YAAY,KAAK,IAAI,YAAY;AACvC,UAAM,QAAQ,aAAa,aAAa;AAGxC,QAAI,MAAM;AAAO,aAAO;AAExB,UAAM,oBAAoB,KAAK,IAAI,qBAAqB;AACxD,UAAM,qBAAqB,KAAK,IAAI,sBAAsB;AAC1D,UAAM,kBAAkB,KAAK,IAAI,mBAAmB;AACpD,UAAM,eAAe,qBAAqB,sBAAsB;AAGhE,QAAI,gBAAgB,KAAK,SAAS,GAAG;AACpC,aAAO,qBAAqB;AAAA,IAC7B;AAEA,UAAM,gBAAgB,IAAI,2BAA2B;AACrD,QAAI;AAAI,oBAAc,OAAO,qBAAqB,iBAAiB;AACnE,QAAI,OAAO;AACV,oBAAc,OAAO,qBAAqB,SAAS;AAAA,IACpD,OAAO;AAEN,UAAI,WAAW;AACd,sBAAc,OAAO,qBAAqB,aAAa;AAAA,MACxD,OAAO;AACN,YAAI;AAAmB,wBAAc,OAAO,qBAAqB,qBAAqB;AACtF,YAAI;AAAoB,wBAAc,OAAO,qBAAqB,sBAAsB;AAAA,MACzF;AAGA,UAAI,WAAW;AACd,sBAAc,OAAO,qBAAqB,aAAa;AAAA,MACxD,WAAW,iBAAiB;AAC3B,sBAAc,OAAO,qBAAqB,mBAAmB;AAAA,MAC9D;AAEA,UAAI,YAAY;AACf,sBAAc,OAAO,qBAAqB,cAAc;AAAA,MACzD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAvca;AA0gBN,IAAW,4BAAX,kBAAWA,+BAAX;AACN,EAAAA,2BAAA,QAAK;AACL,EAAAA,2BAAA,eAAY;AACZ,EAAAA,2BAAA,gBAAa;AACb,EAAAA,2BAAA,eAAY;AACZ,EAAAA,2BAAA,qBAAkB;AAClB,EAAAA,2BAAA,uBAAoB;AACpB,EAAAA,2BAAA,wBAAqB;AACrB,EAAAA,2BAAA,cAAW;AARM,SAAAA;AAAA,GAAA;AAeX,IAAW,uBAAX,kBAAWC,0BAAX;AACN,EAAAA,sBAAA,cAAW;AACX,EAAAA,sBAAA,uBAAoB;AACpB,EAAAA,sBAAA,mBAAgB;AAChB,EAAAA,sBAAA,yBAAsB;AACtB,EAAAA,sBAAA,eAAY;AACZ,EAAAA,sBAAA,4BAAyB;AACzB,EAAAA,sBAAA,2BAAwB;AACxB,EAAAA,sBAAA,mBAAgB;AAChB,EAAAA,sBAAA,oBAAiB;AACjB,EAAAA,sBAAA,qBAAkB;AAClB,EAAAA,sBAAA,oBAAiB;AACjB,EAAAA,sBAAA,uBAAoB;AACpB,EAAAA,sBAAA,qBAAkB;AAbD,SAAAA;AAAA,GAAA","sourcesContent":["import { ArgumentStream, Lexer, Parser, type IUnorderedStrategy } from '@sapphire/lexure';\nimport { AliasPiece, type AliasPieceJSON, type AliasStore } from '@sapphire/pieces';\nimport { isNullish, type Awaitable, type NonNullObject } from '@sapphire/utilities';\nimport type { LocalizationMap } from 'discord-api-types/v10';\nimport {\n\tPermissions,\n\ttype AutocompleteInteraction,\n\ttype CommandInteraction,\n\ttype ContextMenuInteraction,\n\ttype Message,\n\ttype PermissionResolvable,\n\ttype Snowflake\n} from 'discord.js';\nimport { Args } from '../parsers/Args';\nimport { BucketScope, RegisterBehavior } from '../types/Enums';\nimport { acquire } from '../utils/application-commands/ApplicationCommandRegistries';\nimport type { ApplicationCommandRegistry } from '../utils/application-commands/ApplicationCommandRegistry';\nimport { emitRegistryError } from '../utils/application-commands/emitRegistryError';\nimport { getNeededRegistryParameters } from '../utils/application-commands/getNeededParameters';\nimport { PreconditionContainerArray, type PreconditionEntryResolvable } from '../utils/preconditions/PreconditionContainerArray';\nimport { FlagUnorderedStrategy, type FlagStrategyOptions } from '../utils/strategies/FlagUnorderedStrategy';\n\nexport class Command<PreParseReturn = Args, O extends Command.Options = Command.Options> extends AliasPiece<O> {\n\t/**\n\t * A basic summary about the command\n\t * @since 1.0.0\n\t */\n\tpublic description: string;\n\n\t/**\n\t * The preconditions to be run.\n\t * @since 1.0.0\n\t */\n\tpublic preconditions: PreconditionContainerArray;\n\n\t/**\n\t * Longer version of command's summary and how to use it\n\t * @since 1.0.0\n\t */\n\tpublic detailedDescription: DetailedDescriptionCommand;\n\n\t/**\n\t * The full category for the command. Either an array of strings that denote every (sub)folder the command is in,\n\t * or `null` if it could not be resolved automatically.\n\t *\n\t * If this is `null` for how you setup your code then you can overwrite how the `fullCategory` is resolved by\n\t * extending this class and overwriting the assignment in the constructor.\n\t * @since 2.0.0\n\t */\n\tpublic readonly fullCategory: readonly string[];\n\n\t/**\n\t * The strategy to use for the lexer.\n\t * @since 1.0.0\n\t */\n\tpublic strategy: IUnorderedStrategy;\n\n\t/**\n\t * If {@link SapphireClient.typing} is true, it can be overridden for a specific command using this property, set via its options.\n\t * Otherwise, this property will be ignored.\n\t * @default true\n\t */\n\tpublic typing: boolean;\n\n\t/**\n\t * The application command registry associated with this command.\n\t * @since 3.0.0\n\t */\n\tpublic readonly applicationCommandRegistry = acquire(this.name);\n\n\t/**\n\t * The lexer to be used for command parsing\n\t * @since 1.0.0\n\t * @private\n\t */\n\tprotected lexer: Lexer;\n\n\t/**\n\t * @since 1.0.0\n\t * @param context The context.\n\t * @param options Optional Command settings.\n\t */\n\tpublic constructor(context: AliasPiece.Context, options: O = {} as O) {\n\t\tsuper(context, { ...options, name: (options.name ?? context.name).toLowerCase() });\n\t\tthis.description = options.description ?? '';\n\t\tthis.detailedDescription = options.detailedDescription ?? '';\n\t\tthis.strategy = new FlagUnorderedStrategy(options);\n\t\tthis.fullCategory = options.fullCategory ?? this.location.directories;\n\t\tthis.typing = options.typing ?? true;\n\n\t\tthis.lexer = new Lexer({\n\t\t\tquotes: options.quotes ?? [\n\t\t\t\t['\"', '\"'], // Double quotes\n\t\t\t\t['“', '”'], // Fancy quotes (on iOS)\n\t\t\t\t['「', '」'], // Corner brackets (CJK)\n\t\t\t\t['«', '»'] // French quotes (guillemets)\n\t\t\t]\n\t\t});\n\n\t\tif (options.generateDashLessAliases) {\n\t\t\tconst dashLessAliases: string[] = [];\n\t\t\tif (this.name.includes('-')) dashLessAliases.push(this.name.replace(/-/g, ''));\n\t\t\tfor (const alias of this.aliases) if (alias.includes('-')) dashLessAliases.push(alias.replace(/-/g, ''));\n\n\t\t\tthis.aliases = [...this.aliases, ...dashLessAliases];\n\t\t}\n\n\t\tif (options.generateUnderscoreLessAliases) {\n\t\t\tconst underscoreLessAliases: string[] = [];\n\t\t\tif (this.name.includes('_')) underscoreLessAliases.push(this.name.replace(/_/g, ''));\n\t\t\tfor (const alias of this.aliases) if (alias.includes('_')) underscoreLessAliases.push(alias.replace(/_/g, ''));\n\n\t\t\tthis.aliases = [...this.aliases, ...underscoreLessAliases];\n\t\t}\n\n\t\tthis.preconditions = new PreconditionContainerArray(options.preconditions);\n\t\tthis.parseConstructorPreConditions(options);\n\t}\n\n\t/**\n\t * The message pre-parse method. This method can be overridden by plugins to define their own argument parser.\n\t * @param message The message that triggered the command.\n\t * @param parameters The raw parameters as a single string.\n\t * @param context The command-context used in this execution.\n\t */\n\tpublic messagePreParse(message: Message, parameters: string, context: MessageCommand.RunContext): Awaitable<PreParseReturn> {\n\t\tconst parser = new Parser(this.strategy);\n\t\tconst args = new ArgumentStream(parser.run(this.lexer.run(parameters)));\n\t\treturn new Args(message, this as any, args, context) as any;\n\t}\n\n\t/**\n\t * The main category for the command, if any.\n\t *\n\t * This getter retrieves the first value of {@link Command.fullCategory}, if it has at least one item, otherwise it\n\t * returns `null`.\n\t *\n\t * @note You can set {@link Command.Options.fullCategory} to override the built-in category resolution.\n\t */\n\tpublic get category(): string | null {\n\t\treturn this.fullCategory.length > 0 ? this.fullCategory[0] : null;\n\t}\n\n\t/**\n\t * The sub-category for the command, if any.\n\t *\n\t * This getter retrieves the second value of {@link Command.fullCategory}, if it has at least two items, otherwise\n\t * it returns `null`.\n\t *\n\t * @note You can set {@link Command.Options.fullCategory} to override the built-in category resolution.\n\t */\n\tpublic get subCategory(): string | null {\n\t\treturn this.fullCategory.length > 1 ? this.fullCategory[1] : null;\n\t}\n\n\t/**\n\t * The parent category for the command.\n\t *\n\t * This getter retrieves the last value of {@link Command.fullCategory}, if it has at least one item, otherwise it\n\t * returns `null`.\n\t *\n\t * @note You can set {@link Command.Options.fullCategory} to override the built-in category resolution.\n\t */\n\tpublic get parentCategory(): string | null {\n\t\treturn this.fullCategory.length > 1 ? this.fullCategory[this.fullCategory.length - 1] : null;\n\t}\n\n\t/**\n\t * Executes the message command's logic.\n\t * @param message The message that triggered the command.\n\t * @param args The value returned by {@link Command.messagePreParse}, by default an instance of {@link Args}.\n\t * @param context The context in which the command was executed.\n\t */\n\tpublic messageRun?(message: Message, args: PreParseReturn, context: MessageCommand.RunContext): Awaitable<unknown>;\n\n\t/**\n\t * Executes the application command's logic.\n\t * @param interaction The interaction that triggered the command.\n\t */\n\tpublic chatInputRun?(interaction: CommandInteraction, context: ChatInputCommand.RunContext): Awaitable<unknown>;\n\n\t/**\n\t * Executes the context menu's logic.\n\t * @param interaction The interaction that triggered the command.\n\t */\n\tpublic contextMenuRun?(interaction: ContextMenuInteraction, context: ContextMenuCommand.RunContext): Awaitable<unknown>;\n\n\t/**\n\t * Executes the autocomplete logic.\n\t *\n\t * :::tip\n\t *\n\t * You may use this, or alternatively create an {@link InteractionHandler interaction handler} to handle autocomplete interactions.\n\t * Keep in mind that commands take precedence over interaction handlers.\n\t *\n\t * :::\n\t *\n\t * @param interaction The interaction that triggered the autocomplete.\n\t */\n\tpublic autocompleteRun?(interaction: AutocompleteInteraction): Awaitable<unknown>;\n\n\t/**\n\t * Defines the JSON.stringify behavior of the command.\n\t */\n\tpublic override toJSON(): CommandJSON {\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\tdescription: this.description,\n\t\t\tdetailedDescription: this.detailedDescription,\n\t\t\tcategory: this.category\n\t\t};\n\t}\n\n\t/**\n\t * Registers the application commands that should be handled by this command.\n\t * @param registry This command's registry\n\t */\n\tpublic registerApplicationCommands?(registry: ApplicationCommandRegistry): Awaitable<void>;\n\n\t/**\n\t * Type-guard that ensures the command supports message commands by checking if the handler for it is present\n\t */\n\tpublic supportsMessageCommands(): this is MessageCommand {\n\t\treturn Reflect.has(this, 'messageRun');\n\t}\n\n\t/**\n\t * Type-guard that ensures the command supports chat input commands by checking if the handler for it is present\n\t */\n\tpublic supportsChatInputCommands(): this is ChatInputCommand {\n\t\treturn Reflect.has(this, 'chatInputRun');\n\t}\n\n\t/**\n\t * Type-guard that ensures the command supports context menu commands by checking if the handler for it is present\n\t */\n\tpublic supportsContextMenuCommands(): this is ContextMenuCommand {\n\t\treturn Reflect.has(this, 'contextMenuRun');\n\t}\n\n\t/**\n\t * Type-guard that ensures the command supports handling autocomplete interactions by checking if the handler for it is present\n\t */\n\tpublic supportsAutocompleteInteractions(): this is AutocompleteCommand {\n\t\treturn Reflect.has(this, 'autocompleteRun');\n\t}\n\n\tpublic override async reload() {\n\t\t// Remove the aliases from the command store\n\t\tconst store = this.store as AliasStore<this>;\n\t\tconst registry = this.applicationCommandRegistry;\n\n\t\tfor (const nameOrId of registry.chatInputCommands) {\n\t\t\tconst aliasedPiece = store.aliases.get(nameOrId);\n\t\t\tif (aliasedPiece === this) {\n\t\t\t\tstore.aliases.delete(nameOrId);\n\t\t\t}\n\t\t}\n\n\t\tfor (const nameOrId of registry.contextMenuCommands) {\n\t\t\tconst aliasedPiece = store.aliases.get(nameOrId);\n\t\t\tif (aliasedPiece === this) {\n\t\t\t\tstore.aliases.delete(nameOrId);\n\t\t\t}\n\t\t}\n\n\t\t// Reset the registry's contents\n\t\tregistry.chatInputCommands.clear();\n\t\tregistry.contextMenuCommands.clear();\n\t\tregistry.guildIdsToFetch.clear();\n\t\tregistry['apiCalls'].length = 0;\n\n\t\t// Reload the command\n\t\tawait super.reload();\n\n\t\t// Get the command from the store to get any changes from the reload\n\t\tconst updatedPiece = store.get(this.name);\n\n\t\t// This likely shouldn't happen but not worth continuing if the piece is somehow no longer available\n\t\tif (!updatedPiece) return;\n\n\t\tconst updatedRegistry = updatedPiece.applicationCommandRegistry;\n\n\t\tif (updatedPiece.registerApplicationCommands) {\n\t\t\t// Rerun the registry\n\t\t\ttry {\n\t\t\t\tawait updatedPiece.registerApplicationCommands(updatedRegistry);\n\t\t\t} catch (err) {\n\t\t\t\temitRegistryError(err, updatedPiece);\n\t\t\t\t// No point on continuing\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Re-initialize the store and the API data (insert in the store handles the register method)\n\t\tconst { applicationCommands, globalCommands, guildCommands } = await getNeededRegistryParameters(updatedRegistry.guildIdsToFetch);\n\n\t\t// Handle the API calls\n\t\t// eslint-disable-next-line @typescript-eslint/dot-notation\n\t\tawait updatedRegistry['runAPICalls'](applicationCommands, globalCommands, guildCommands);\n\n\t\t// Re-set the aliases\n\t\tfor (const nameOrId of updatedRegistry.chatInputCommands) {\n\t\t\tstore.aliases.set(nameOrId, updatedPiece);\n\t\t}\n\n\t\tfor (const nameOrId of updatedRegistry.contextMenuCommands) {\n\t\t\tstore.aliases.set(nameOrId, updatedPiece);\n\t\t}\n\t}\n\n\t/**\n\t * Parses the command's options and processes them, calling {@link Command#parseConstructorPreConditionsRunIn},\n\t * {@link Command#parseConstructorPreConditionsNsfw},\n\t * {@link Command#parseConstructorPreConditionsRequiredClientPermissions}, and\n\t * {@link Command#parseConstructorPreConditionsCooldown}.\n\t * @since 2.0.0\n\t * @param options The command options given from the constructor.\n\t */\n\tprotected parseConstructorPreConditions(options: Command.Options): void {\n\t\tthis.parseConstructorPreConditionsRunIn(options);\n\t\tthis.parseConstructorPreConditionsNsfw(options);\n\t\tthis.parseConstructorPreConditionsRequiredClientPermissions(options);\n\t\tthis.parseConstructorPreConditionsRequiredUserPermissions(options);\n\t\tthis.parseConstructorPreConditionsCooldown(options);\n\t}\n\n\t/**\n\t * Appends the `NSFW` precondition if {@link Command.Options.nsfw} is set to true.\n\t * @param options The command options given from the constructor.\n\t */\n\tprotected parseConstructorPreConditionsNsfw(options: Command.Options) {\n\t\tif (options.nsfw) this.preconditions.append(CommandPreConditions.NotSafeForWork);\n\t}\n\n\t/**\n\t * Appends the `DMOnly`, `GuildOnly`, `NewsOnly`, and `TextOnly` preconditions based on the values passed in\n\t * {@link Command.Options.runIn}, optimizing in specific cases (`NewsOnly` + `TextOnly` = `GuildOnly`; `DMOnly` +\n\t * `GuildOnly` = `null`), defaulting to `null`, which doesn't add a precondition.\n\t * @param options The command options given from the constructor.\n\t */\n\tprotected parseConstructorPreConditionsRunIn(options: Command.Options) {\n\t\tconst runIn = this.resolveConstructorPreConditionsRunType(options.runIn);\n\t\tif (runIn !== null) this.preconditions.append(runIn as any);\n\t}\n\n\t/**\n\t * Appends the `ClientPermissions` precondition when {@link Command.Options.requiredClientPermissions} resolves to a\n\t * non-zero bitfield.\n\t * @param options The command options given from the constructor.\n\t */\n\tprotected parseConstructorPreConditionsRequiredClientPermissions(options: Command.Options) {\n\t\tconst permissions = new Permissions(options.requiredClientPermissions);\n\t\tif (permissions.bitfield !== 0n) {\n\t\t\tthis.preconditions.append({ name: CommandPreConditions.ClientPermissions, context: { permissions } });\n\t\t}\n\t}\n\n\t/**\n\t * Appends the `UserPermissions` precondition when {@link Command.Options.requiredUserPermissions} resolves to a\n\t * non-zero bitfield.\n\t * @param options The command options given from the constructor.\n\t */\n\tprotected parseConstructorPreConditionsRequiredUserPermissions(options: Command.Options) {\n\t\tconst permissions = new Permissions(options.requiredUserPermissions);\n\t\tif (permissions.bitfield !== 0n) {\n\t\t\tthis.preconditions.append({ name: CommandPreConditions.UserPermissions, context: { permissions } });\n\t\t}\n\t}\n\n\t/**\n\t * Appends the `Cooldown` precondition when {@link Command.Options.cooldownLimit} and\n\t * {@link Command.Options.cooldownDelay} are both non-zero.\n\t * @param options The command options given from the constructor.\n\t */\n\tprotected parseConstructorPreConditionsCooldown(options: Command.Options) {\n\t\tconst { defaultCooldown } = this.container.client.options;\n\n\t\t// We will check for whether the command is filtered from the defaults, but we will allow overridden values to\n\t\t// be set. If an overridden value is passed, it will have priority. Otherwise it will default to 0 if filtered\n\t\t// (causing the precondition to not be registered) or the default value with a fallback to a single-use cooldown.\n\t\tconst filtered = defaultCooldown?.filteredCommands?.includes(this.name) ?? false;\n\t\tconst limit = options.cooldownLimit ?? (filtered ? 0 : defaultCooldown?.limit ?? 1);\n\t\tconst delay = options.cooldownDelay ?? (filtered ? 0 : defaultCooldown?.delay ?? 0);\n\n\t\tif (limit && delay) {\n\t\t\tconst scope = options.cooldownScope ?? defaultCooldown?.scope ?? BucketScope.User;\n\t\t\tconst filteredUsers = options.cooldownFilteredUsers ?? defaultCooldown?.filteredUsers;\n\t\t\tthis.preconditions.append({\n\t\t\t\tname: CommandPreConditions.Cooldown,\n\t\t\t\tcontext: { scope, limit, delay, filteredUsers }\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate resolveConstructorPreConditionsRunType(runIn: Command.Options['runIn']): PreconditionContainerArray | CommandPreConditions | null {\n\t\tif (isNullish(runIn)) return null;\n\t\tif (typeof runIn === 'string') {\n\t\t\tswitch (runIn) {\n\t\t\t\tcase 'DM':\n\t\t\t\t\treturn CommandPreConditions.DirectMessageOnly;\n\t\t\t\tcase 'GUILD_TEXT':\n\t\t\t\t\treturn CommandPreConditions.GuildTextOnly;\n\t\t\t\tcase 'GUILD_VOICE':\n\t\t\t\t\treturn CommandPreConditions.GuildVoiceOnly;\n\t\t\t\tcase 'GUILD_NEWS':\n\t\t\t\t\treturn CommandPreConditions.GuildNewsOnly;\n\t\t\t\tcase 'GUILD_NEWS_THREAD':\n\t\t\t\t\treturn CommandPreConditions.GuildNewsThreadOnly;\n\t\t\t\tcase 'GUILD_PUBLIC_THREAD':\n\t\t\t\t\treturn CommandPreConditions.GuildPublicThreadOnly;\n\t\t\t\tcase 'GUILD_PRIVATE_THREAD':\n\t\t\t\t\treturn CommandPreConditions.GuildPrivateThreadOnly;\n\t\t\t\tcase 'GUILD_ANY':\n\t\t\t\t\treturn CommandPreConditions.GuildOnly;\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// If there's no channel it can run on, throw an error:\n\t\tif (runIn.length === 0) {\n\t\t\tthrow new Error(`${this.constructor.name}[${this.name}]: \"runIn\" was specified as an empty array.`);\n\t\t}\n\n\t\tif (runIn.length === 1) {\n\t\t\treturn this.resolveConstructorPreConditionsRunType(runIn[0]);\n\t\t}\n\n\t\tconst keys = new Set(runIn);\n\n\t\tconst dm = keys.has('DM');\n\t\tconst guildText = keys.has('GUILD_TEXT');\n\t\tconst guildVoice = keys.has('GUILD_VOICE');\n\t\tconst guildNews = keys.has('GUILD_NEWS');\n\t\tconst guild = guildText && guildNews && guildVoice;\n\n\t\t// If runs everywhere, optimise to null:\n\t\tif (dm && guild) return null;\n\n\t\tconst guildPublicThread = keys.has('GUILD_PUBLIC_THREAD');\n\t\tconst guildPrivateThread = keys.has('GUILD_PRIVATE_THREAD');\n\t\tconst guildNewsThread = keys.has('GUILD_NEWS_THREAD');\n\t\tconst guildThreads = guildPublicThread && guildPrivateThread && guildNewsThread;\n\n\t\t// If runs in any thread, optimise to thread-only:\n\t\tif (guildThreads && keys.size === 3) {\n\t\t\treturn CommandPreConditions.GuildThreadOnly;\n\t\t}\n\n\t\tconst preconditions = new PreconditionContainerArray();\n\t\tif (dm) preconditions.append(CommandPreConditions.DirectMessageOnly);\n\t\tif (guild) {\n\t\t\tpreconditions.append(CommandPreConditions.GuildOnly);\n\t\t} else {\n\t\t\t// GuildText includes PublicThread and PrivateThread\n\t\t\tif (guildText) {\n\t\t\t\tpreconditions.append(CommandPreConditions.GuildTextOnly);\n\t\t\t} else {\n\t\t\t\tif (guildPublicThread) preconditions.append(CommandPreConditions.GuildPublicThreadOnly);\n\t\t\t\tif (guildPrivateThread) preconditions.append(CommandPreConditions.GuildPrivateThreadOnly);\n\t\t\t}\n\n\t\t\t// GuildNews includes NewsThread\n\t\t\tif (guildNews) {\n\t\t\t\tpreconditions.append(CommandPreConditions.GuildNewsOnly);\n\t\t\t} else if (guildNewsThread) {\n\t\t\t\tpreconditions.append(CommandPreConditions.GuildNewsThreadOnly);\n\t\t\t}\n\n\t\t\tif (guildVoice) {\n\t\t\t\tpreconditions.append(CommandPreConditions.GuildVoiceOnly);\n\t\t\t}\n\t\t}\n\n\t\treturn preconditions;\n\t}\n}\n\nexport type MessageCommand = Command & Required<Pick<Command, 'messageRun'>>;\n\nexport namespace MessageCommand {\n\texport type Options = CommandOptions;\n\texport type JSON = CommandJSON;\n\texport type Context = AliasPiece.Context;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type RunContext = MessageCommandContext;\n}\n\nexport type ChatInputCommand = Command & Required<Pick<Command, 'chatInputRun'>>;\n\nexport namespace ChatInputCommand {\n\texport type Options = CommandOptions;\n\texport type JSON = CommandJSON;\n\texport type Context = AliasPiece.Context;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type RunContext = ChatInputCommandContext;\n\texport type Interaction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> = CommandInteraction<Cached>;\n\texport type Registry = ApplicationCommandRegistry;\n}\n\nexport type ContextMenuCommand = Command & Required<Pick<Command, 'contextMenuRun'>>;\n\nexport namespace ContextMenuCommand {\n\texport type Options = CommandOptions;\n\texport type JSON = CommandJSON;\n\texport type Context = AliasPiece.Context;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type RunContext = ContextMenuCommandContext;\n\texport type Interaction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> = ContextMenuInteraction<Cached>;\n\texport type Registry = ApplicationCommandRegistry;\n}\n\nexport type AutocompleteCommand = Command & Required<Pick<Command, 'autocompleteRun'>>;\n\nexport namespace AutocompleteCommand {\n\texport type Options = CommandOptions;\n\texport type JSON = CommandJSON;\n\texport type Context = AliasPiece.Context;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type RunContext = AutocompleteCommandContext;\n\texport type Interaction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> = AutocompleteInteraction<Cached>;\n\texport type Registry = ApplicationCommandRegistry;\n}\n\n/**\n * The allowed values for {@link Command.Options.runIn}.\n * @remark It is discouraged to use this type, we recommend using {@link Command.OptionsRunTypeEnum} instead.\n * @since 2.0.0\n */\nexport type CommandOptionsRunType =\n\t| 'DM'\n\t| 'GUILD_TEXT'\n\t| 'GUILD_VOICE'\n\t| 'GUILD_NEWS'\n\t| 'GUILD_NEWS_THREAD'\n\t| 'GUILD_PUBLIC_THREAD'\n\t| 'GUILD_PRIVATE_THREAD'\n\t| 'GUILD_ANY';\n\n/**\n * The allowed values for {@link Command.Options.runIn} as an enum.\n * @since 2.0.0\n */\nexport const enum CommandOptionsRunTypeEnum {\n\tDm = 'DM',\n\tGuildText = 'GUILD_TEXT',\n\tGuildVoice = 'GUILD_VOICE',\n\tGuildNews = 'GUILD_NEWS',\n\tGuildNewsThread = 'GUILD_NEWS_THREAD',\n\tGuildPublicThread = 'GUILD_PUBLIC_THREAD',\n\tGuildPrivateThread = 'GUILD_PRIVATE_THREAD',\n\tGuildAny = 'GUILD_ANY'\n}\n\n/**\n * The available command pre-conditions.\n * @since 2.0.0\n */\nexport const enum CommandPreConditions {\n\tCooldown = 'Cooldown',\n\tDirectMessageOnly = 'DMOnly',\n\tGuildNewsOnly = 'GuildNewsOnly',\n\tGuildNewsThreadOnly = 'GuildNewsThreadOnly',\n\tGuildOnly = 'GuildOnly',\n\tGuildPrivateThreadOnly = 'GuildPrivateThreadOnly',\n\tGuildPublicThreadOnly = 'GuildPublicThreadOnly',\n\tGuildTextOnly = 'GuildTextOnly',\n\tGuildVoiceOnly = 'GuildVoiceOnly',\n\tGuildThreadOnly = 'GuildThreadOnly',\n\tNotSafeForWork = 'NSFW',\n\tClientPermissions = 'ClientPermissions',\n\tUserPermissions = 'UserPermissions'\n}\n\n/**\n * The {@link Command} options.\n * @since 1.0.0\n */\nexport interface CommandOptions extends AliasPiece.Options, FlagStrategyOptions {\n\t/**\n\t * Whether to add aliases for commands with dashes in them\n\t * @since 1.0.0\n\t * @default false\n\t */\n\tgenerateDashLessAliases?: boolean;\n\n\t/**\n\t * Whether to add aliases for commands with underscores in them\n\t * @since 3.0.0\n\t * @default false\n\t */\n\tgenerateUnderscoreLessAliases?: boolean;\n\n\t/**\n\t * The description for the command.\n\t * @since 1.0.0\n\t * @default ''\n\t */\n\tdescription?: string;\n\n\t/**\n\t * The detailed description for the command.\n\t * @since 1.0.0\n\t * @default ''\n\t */\n\tdetailedDescription?: DetailedDescriptionCommand;\n\n\t/**\n\t * The full category path for the command\n\t * @since 2.0.0\n\t * @default 'An array of folder names that lead back to the folder that is registered for in the commands store'\n\t * @example\n\t * ```typescript\n\t * // Given a file named `ping.js` at the path of `commands/General/ping.js`\n\t * ['General']\n\t *\n\t * // Given a file named `info.js` at the path of `commands/General/About/ping.js`\n\t * ['General', 'About']\n\t * ```\n\t */\n\tfullCategory?: string[];\n\n\t/**\n\t * The {@link Precondition}s to be run, accepts an array of their names.\n\t * @seealso {@link PreconditionContainerArray}\n\t * @since 1.0.0\n\t * @default []\n\t */\n\tpreconditions?: readonly PreconditionEntryResolvable[];\n\n\t/**\n\t * The quotes accepted by this command, pass `[]` to disable them.\n\t * @since 1.0.0\n\t * @default\n\t * [\n\t *   ['\"', '\"'], // Double quotes\n\t *   ['“', '”'], // Fancy quotes (on iOS)\n\t *   ['「', '」'] // Corner brackets (CJK)\n\t *   ['«', '»'] // French quotes (guillemets)\n\t * ]\n\t */\n\tquotes?: [string, string][];\n\n\t/**\n\t * Sets whether or not the command should be treated as NSFW. If set to true, the `NSFW` precondition will be added to the list.\n\t * @since 2.0.0\n\t * @default false\n\t */\n\tnsfw?: boolean;\n\n\t/**\n\t * The amount of entries the cooldown can have before filling up, if set to a non-zero value alongside {@link Command.Options.cooldownDelay}, the `Cooldown` precondition will be added to the list.\n\t * @since 2.0.0\n\t * @default 1\n\t */\n\tcooldownLimit?: number;\n\n\t/**\n\t * The time in milliseconds for the cooldown entries to reset, if set to a non-zero value alongside {@link Command.Options.cooldownLimit}, the `Cooldown` precondition will be added to the list.\n\t * @since 2.0.0\n\t * @default 0\n\t */\n\tcooldownDelay?: number;\n\n\t/**\n\t * The scope of the cooldown entries.\n\t * @since 2.0.0\n\t * @default BucketScope.User\n\t */\n\tcooldownScope?: BucketScope;\n\n\t/**\n\t * The users that are exempt from the Cooldown precondition.\n\t * Use this to filter out someone like a bot owner\n\t * @since 2.0.0\n\t * @default undefined\n\t */\n\tcooldownFilteredUsers?: Snowflake[];\n\n\t/**\n\t * The required permissions for the client.\n\t * @since 2.0.0\n\t * @default 0\n\t */\n\trequiredClientPermissions?: PermissionResolvable;\n\n\t/**\n\t * The required permissions for the user.\n\t * @since 2.0.0\n\t * @default 0\n\t */\n\trequiredUserPermissions?: PermissionResolvable;\n\n\t/**\n\t * The channels the command should run in. If set to `null`, no precondition entry will be added. Some optimizations are applied when given an array to reduce the amount of preconditions run (e.g. `'GUILD_TEXT'` and `'GUILD_NEWS'` becomes `'GUILD_ANY'`, and if both `'DM'` and `'GUILD_ANY'` are defined, then no precondition entry is added as it runs in all channels).\n\t * @since 2.0.0\n\t * @default null\n\t */\n\trunIn?: Command.RunInTypes | CommandOptionsRunTypeEnum | readonly (Command.RunInTypes | CommandOptionsRunTypeEnum)[] | null;\n\n\t/**\n\t * If {@link SapphireClient.typing} is true, this option will override it.\n\t * Otherwise, this option has no effect - you may call {@link Channel#sendTyping}` in the run method if you want specific commands to display the typing status.\n\t * @default true\n\t */\n\ttyping?: boolean;\n}\n\nexport interface CommandChatInputRegisterShortcut {\n\t/**\n\t * Specifies what we should do when the command is present, but not identical with the data you provided\n\t * @default RegisterBehavior.LogToConsole\n\t */\n\tbehaviorWhenNotIdentical?: RegisterBehavior;\n\t/**\n\t * If we should register the command, be it missing or present already\n\t * @default false\n\t */\n\tregister: boolean;\n\t/**\n\t * If this is specified, the application commands will only be registered for these guild ids.\n\t *\n\t * :::tip\n\t *\n\t * If you want to register both guild and global chat input commands,\n\t * please read the [guide about registering application commands](https://www.sapphirejs.dev/docs/Guide/commands/registering-application-commands) instead.\n\t *\n\t * :::\n\t *\n\t */\n\tguildIds?: string[];\n\t/**\n\t * Specifies a list of command ids that we should check in the event of a name mismatch\n\t * @default []\n\t */\n\tidHints?: string[];\n\t/**\n\t * Sets the `defaultPermission` field for the chat input command\n\t *\n\t * :::warn\n\t *\n\t * This will be deprecated in the future for Discord's new permission system.\n\t *\n\t * :::\n\t */\n\tdefaultPermission?: boolean;\n\t/**\n\t * Sets the `nameLocalizations` for the chat input command\n\t */\n\tnameLocalizations?: LocalizationMap;\n\t/**\n\t * Sets the `descriptionLocalizations` for the chat input command\n\t */\n\tdescriptionLocalizations?: LocalizationMap;\n}\n\nexport interface MessageCommandContext extends Record<PropertyKey, unknown> {\n\t/**\n\t * The prefix used to run this command.\n\t *\n\t * This is a string for the mention and default prefix, and a RegExp for the `regexPrefix`.\n\t */\n\tprefix: string | RegExp;\n\t/**\n\t * The alias used to run this command.\n\t */\n\tcommandName: string;\n\t/**\n\t * The matched prefix, this will always be the same as {@link MessageCommand.RunContext.prefix} if it was a string, otherwise it is\n\t * the result of doing `prefix.exec(content)[0]`.\n\t */\n\tcommandPrefix: string;\n}\n\nexport interface ChatInputCommandContext extends Record<PropertyKey, unknown> {\n\t/**\n\t * The name of the command.\n\t */\n\tcommandName: string;\n\t/**\n\t * The id of the command.\n\t */\n\tcommandId: string;\n}\n\nexport interface ContextMenuCommandContext extends Record<PropertyKey, unknown> {\n\t/**\n\t * The name of the command.\n\t */\n\tcommandName: string;\n\t/**\n\t * The id of the command.\n\t */\n\tcommandId: string;\n}\n\nexport interface AutocompleteCommandContext extends Record<PropertyKey, unknown> {\n\t/**\n\t * The name of the command.\n\t */\n\tcommandName: string;\n\t/**\n\t * The id of the command.\n\t */\n\tcommandId: string;\n}\n\nexport interface CommandJSON extends AliasPieceJSON {\n\tdescription: string;\n\tdetailedDescription: DetailedDescriptionCommand;\n\tcategory: string | null;\n}\n\nexport namespace Command {\n\texport type Options = CommandOptions;\n\texport type JSON = CommandJSON;\n\texport type Context = AliasPiece.Context;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type ChatInputInteraction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> =\n\t\timport('discord.js').CommandInteraction<Cached>;\n\texport type ContextMenuInteraction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> =\n\t\timport('discord.js').ContextMenuInteraction<Cached>;\n\texport type AutocompleteInteraction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> =\n\t\timport('discord.js').AutocompleteInteraction<Cached>;\n\texport type Registry = ApplicationCommandRegistry;\n}\n\nexport type DetailedDescriptionCommand = string | DetailedDescriptionCommandObject;\n\nexport interface DetailedDescriptionCommandObject extends NonNullObject {}\n"]}