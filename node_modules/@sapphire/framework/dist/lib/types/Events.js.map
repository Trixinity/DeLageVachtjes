{"version":3,"sources":["../../../src/lib/types/Events.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Piece, Store } from '@sapphire/pieces';\nimport {\n\tConstants,\n\ttype AutocompleteInteraction,\n\ttype CommandInteraction,\n\ttype ContextMenuInteraction,\n\ttype Interaction,\n\ttype Message\n} from 'discord.js';\nimport type { UserError } from '../errors/UserError';\nimport type {\n\tAutocompleteCommand,\n\tAutocompleteCommandContext,\n\tChatInputCommand,\n\tChatInputCommandContext,\n\tCommand,\n\tContextMenuCommand,\n\tContextMenuCommandContext,\n\tMessageCommand\n} from '../structures/Command';\nimport type { InteractionHandler } from '../structures/InteractionHandler';\nimport type { Listener } from '../structures/Listener';\nimport type { PluginHook } from './Enums';\n\nexport const Events = {\n\t// #region Discord.js base events\n\tChannelCreate: Constants.Events.CHANNEL_CREATE,\n\tChannelDelete: Constants.Events.CHANNEL_DELETE,\n\tChannelPinsUpdate: Constants.Events.CHANNEL_PINS_UPDATE,\n\tChannelUpdate: Constants.Events.CHANNEL_UPDATE,\n\tClientReady: Constants.Events.CLIENT_READY,\n\tDebug: Constants.Events.DEBUG,\n\tError: Constants.Events.ERROR,\n\tGuildBanAdd: Constants.Events.GUILD_BAN_ADD,\n\tGuildBanRemove: Constants.Events.GUILD_BAN_REMOVE,\n\tGuildCreate: Constants.Events.GUILD_CREATE,\n\tGuildDelete: Constants.Events.GUILD_DELETE,\n\tGuildEmojiCreate: Constants.Events.GUILD_EMOJI_CREATE,\n\tGuildEmojiDelete: Constants.Events.GUILD_EMOJI_DELETE,\n\tGuildEmojiUpdate: Constants.Events.GUILD_EMOJI_UPDATE,\n\tGuildIntegrationsUpdate: Constants.Events.GUILD_INTEGRATIONS_UPDATE,\n\tGuildMemberAdd: Constants.Events.GUILD_MEMBER_ADD,\n\tGuildMemberAvailable: Constants.Events.GUILD_MEMBER_AVAILABLE,\n\tGuildMemberRemove: Constants.Events.GUILD_MEMBER_REMOVE,\n\tGuildMembersChunk: Constants.Events.GUILD_MEMBERS_CHUNK,\n\tGuildMemberUpdate: Constants.Events.GUILD_MEMBER_UPDATE,\n\tGuildRoleCreate: Constants.Events.GUILD_ROLE_CREATE,\n\tGuildRoleDelete: Constants.Events.GUILD_ROLE_DELETE,\n\tGuildRoleUpdate: Constants.Events.GUILD_ROLE_UPDATE,\n\tGuildStickerCreate: Constants.Events.GUILD_STICKER_CREATE,\n\tGuildStickerDelete: Constants.Events.GUILD_STICKER_DELETE,\n\tGuildStickerUpdate: Constants.Events.GUILD_STICKER_UPDATE,\n\tGuildUnavailable: Constants.Events.GUILD_UNAVAILABLE,\n\tGuildUpdate: Constants.Events.GUILD_UPDATE,\n\tInteractionCreate: Constants.Events.INTERACTION_CREATE,\n\tInvalidated: Constants.Events.INVALIDATED,\n\tInvalidRequestWarning: Constants.Events.INVALID_REQUEST_WARNING,\n\tInviteCreate: Constants.Events.INVITE_CREATE,\n\tInviteDelete: Constants.Events.INVITE_DELETE,\n\tMessageBulkDelete: Constants.Events.MESSAGE_BULK_DELETE,\n\tMessageCreate: Constants.Events.MESSAGE_CREATE,\n\tMessageDelete: Constants.Events.MESSAGE_DELETE,\n\tMessageReactionAdd: Constants.Events.MESSAGE_REACTION_ADD,\n\tMessageReactionRemove: Constants.Events.MESSAGE_REACTION_REMOVE,\n\tMessageReactionRemoveAll: Constants.Events.MESSAGE_REACTION_REMOVE_ALL,\n\tMessageReactionRemoveEmoji: Constants.Events.MESSAGE_REACTION_REMOVE_EMOJI,\n\tMessageUpdate: Constants.Events.MESSAGE_UPDATE,\n\tPresenceUpdate: Constants.Events.PRESENCE_UPDATE,\n\tRateLimit: Constants.Events.RATE_LIMIT,\n\tRaw: Constants.Events.RAW,\n\tShardDisconnect: Constants.Events.SHARD_DISCONNECT,\n\tShardError: Constants.Events.SHARD_ERROR,\n\tShardReady: Constants.Events.SHARD_READY,\n\tShardReconnecting: Constants.Events.SHARD_RECONNECTING,\n\tShardResume: Constants.Events.SHARD_RESUME,\n\tStageInstanceCreate: Constants.Events.STAGE_INSTANCE_CREATE,\n\tStageInstanceDelete: Constants.Events.STAGE_INSTANCE_DELETE,\n\tStageInstanceUpdate: Constants.Events.STAGE_INSTANCE_UPDATE,\n\tThreadCreate: Constants.Events.THREAD_CREATE,\n\tThreadDelete: Constants.Events.THREAD_DELETE,\n\tThreadListSync: Constants.Events.THREAD_LIST_SYNC,\n\tThreadMembersUpdate: Constants.Events.THREAD_MEMBERS_UPDATE,\n\tThreadMemberUpdate: Constants.Events.THREAD_MEMBER_UPDATE,\n\tThreadUpdate: Constants.Events.THREAD_UPDATE,\n\tTypingStart: Constants.Events.TYPING_START,\n\tUserUpdate: Constants.Events.USER_UPDATE,\n\tVoiceServerUpdate: Constants.Events.VOICE_SERVER_UPDATE,\n\tVoiceStateUpdate: Constants.Events.VOICE_STATE_UPDATE,\n\tWarn: Constants.Events.WARN,\n\tWebhooksUpdate: Constants.Events.WEBHOOKS_UPDATE,\n\t// #endregion Discord.js base events\n\n\t// #region Sapphire events\n\t// Message commands chain\n\t/**\n\t * Emitted when a message is created that was not sent by bots or webhooks.\n\t * @param {Message} message The created message\n\t */\n\tPreMessageParsed: 'preMessageParsed' as const,\n\t/**\n\t * Emitted when a message is created consisting of only the bot's mention.\n\t * @param {Message} message The created message\n\t */\n\tMentionPrefixOnly: 'mentionPrefixOnly' as const,\n\t/**\n\t * Emitted when a message is created that does not start with a valid prefix.\n\t * @param {Message} message The created message\n\t */\n\tNonPrefixedMessage: 'nonPrefixedMessage' as const,\n\t/**\n\t * Emitted when a message is created that does starts with a valid prefix.\n\t * @param {Message} message The created message\n\t */\n\tPrefixedMessage: 'prefixedMessage' as const,\n\n\t/**\n\t * Emitted when a message starts with a valid prefix but does not include a command name.\n\t * @param {UnknownMessageCommandNamePayload} payload\n\t */\n\tUnknownMessageCommandName: 'unknownMessageCommandName' as const,\n\t/**\n\t * Emitted when the name of a sent message command does not match any loaded commands.\n\t * @param {UnknownMessageCommandPayload} payload The contextual payload\n\t */\n\tUnknownMessageCommand: 'unknownMessageCommand' as const,\n\t/**\n\t * Emitted when a message command is executed but a `messageRun` method is not found.\n\t * @param {CommandDoesNotHaveMessageCommandHandler} payload The contextual payload\n\t */\n\tCommandDoesNotHaveMessageCommandHandler: 'commandDoesNotHaveMessageCommandHandler' as const,\n\t/**\n\t * Emitted before the `messageRun` method of a command is run.\n\t * @param {PreMessageCommandRunPayload} payload The contextual payload\n\t */\n\tPreMessageCommandRun: 'preMessageCommandRun' as const,\n\n\t/**\n\t * Emitted when a precondition denies a message command from being run.\n\t * @param {UserError} error The error reported by the precondition\n\t * @param {MessageCommandDeniedPayload} payload The contextual payload\n\t */\n\tMessageCommandDenied: 'messageCommandDenied' as const,\n\t/**\n\t * Emitted when a message command passes all precondition checks, if any.\n\t * @param {MessageCommandAcceptedPayload} payload The contextual payload\n\t */\n\tMessageCommandAccepted: 'messageCommandAccepted' as const,\n\n\t/**\n\t * Emitted directly before a message command is run.\n\t * @param {Message} message The message that executed the command\n\t * @param {Command} command The command that is being run\n\t * @param {MessageCommandRunPayload} payload The contextual payload\n\t */\n\tMessageCommandRun: 'messageCommandRun' as const,\n\t/**\n\t * Emitted after a message command runs successfully.\n\t * @param {MessageCommandSuccessPayload} payload The contextual payload\n\t */\n\tMessageCommandSuccess: 'messageCommandSuccess' as const,\n\t/**\n\t * Emitted after a message command runs unsuccesfully.\n\t * @param {*} error The error that was thrown\n\t * @param {MessageCommandErrorPayload} payload The contextual payload\n\t */\n\tMessageCommandError: 'messageCommandError' as const,\n\t/**\n\t * Emitted directly after a message command finished running, regardless of the outcome.\n\t * @param {Message} message The message that executed the command\n\t * @param {Command} command The command that finished running\n\t * @param {MessageCommandFinishPayload} payload The contextual payload\n\t */\n\tMessageCommandFinish: 'messageCommandFinish' as const,\n\n\t/**\n\t * Emitted after the bot unsuccessfully tried to start typing when a command is executed.\n\t * @param error The error that was thrown\n\t * @param payload The contextual payload\n\t */\n\tMessageCommandTypingError: 'messageCommandTypingError' as const,\n\n\t// Listener errors\n\t/**\n\t * Emitted when an error is encountered when executing a listener.\n\t * @param {*} error The error that was thrown\n\t * @param {ListenerErrorPayload} payload The contextual payload\n\t */\n\tListenerError: 'listenerError' as const,\n\n\t// Registry errors\n\t/**\n\t * Emitted when an error is encountered when handling the command application command registry.\n\t * @param {*} error The error that was thrown\n\t * @param {Command} command The command who's registry caused the error\n\t */\n\tCommandApplicationCommandRegistryError: 'commandApplicationCommandRegistryError' as const,\n\n\t// Piece store?\n\t/**\n\t * Emitted after a piece is loaded.\n\t * @param {Store<Piece>} store The store in which the piece belongs to\n\t * @param {Piece} piece The piece that was loaded\n\t */\n\tPiecePostLoad: 'piecePostLoad' as const,\n\t/**\n\t * Emitted when a piece is unloaded.\n\t * @param {Store<Piece>} store The store in which the piece belongs to\n\t * @param {Piece} piece The piece that was unloaded\n\t */\n\tPieceUnload: 'pieceUnload' as const,\n\n\t// Plugin\n\t/**\n\t * Emitted when a plugin is loaded.\n\t * @param {PluginHook} hook The plugin hook that was loaded\n\t * @param {string | undefined} name The name of the plugin, if any\n\t */\n\tPluginLoaded: 'pluginLoaded' as const,\n\n\t// Interaction handlers\n\t/**\n\t * Emitted when the `parse` method of an interaction handler encounters an error.\n\t * @param {*} error The error that was encountered\n\t * @param {InteractionHandlerParseError} payload The contextual payload\n\t */\n\tInteractionHandlerParseError: 'interactionHandlerParseError' as const,\n\t/**\n\t * Emitted when an error is encountered when executing an interaction handler.\n\t * @param {*} error The error that was encountered\n\t * @param {InteractionHandlerError} payload The contextual payload\n\t */\n\tInteractionHandlerError: 'interactionHandlerError' as const,\n\n\t// Autocomplete interaction\n\t/**\n\t * Emitted when an autocomplete interaction is recieved.\n\t * @param {AutocompleteInteraction} interaction The interaction that was recieved\n\t */\n\tPossibleAutocompleteInteraction: 'possibleAutocompleteInteraction' as const,\n\t/**\n\t * Emitted after an autocomplete interaction handler runs successfully.\n\t * @param {AutocompleteInteractionPayload} payload The contextual payload\n\t */\n\tCommandAutocompleteInteractionSuccess: 'commandAutocompleteInteractionSuccess' as const,\n\t/**\n\t * Emitted when an error is encountered when executing an autocomplete interaction handler.\n\t * @param {*} error The error that was encountered\n\t * @param {AutocompleteInteractionPayload} payload The contextual payload\n\t */\n\tCommandAutocompleteInteractionError: 'commandAutocompleteInteractionError' as const,\n\n\t// Chat input command chain\n\t/**\n\t * Emitted when a chat input command interaction is recieved.\n\t * @param {CommandInteraction} interaction The interaction that was recieved.\n\t */\n\tPossibleChatInputCommand: 'possibleChatInputCommand' as const,\n\t/**\n\t * Emitted when the name of a sent chat input command does not match any loaded commands.\n\t * @param {UnknownChatInputCommandPayload} payload The contextual payload\n\t */\n\tUnknownChatInputCommand: 'unknownChatInputCommand' as const,\n\t/**\n\t * Emitted when a chat input command is executed but a `chatInputRun` method is not found.\n\t * @param {CommandDoesNotHaveChatInputCommandHandlerPayload} payload The contextual payload\n\t */\n\tCommandDoesNotHaveChatInputCommandHandler: 'commandDoesNotHaveChatInputCommandHandler' as const,\n\t/**\n\t * Emitted before the `chatInputRun` method of a command is run.\n\t * @param {PreChatInputCommandRunPayload} payload The contextual payload\n\t */\n\tPreChatInputCommandRun: 'preChatInputCommandRun' as const,\n\n\t/**\n\t * Emitted when a precondition denies a chat input command from being run.\n\t * @param {UserError} error The error reported by the precondition\n\t * @param {ChatInputCommandDeniedPayload} payload The contextual payload\n\t */\n\tChatInputCommandDenied: 'chatInputCommandDenied' as const,\n\t/**\n\t * Emitted when a chat input command passes all precondition checks, if any.\n\t * @param {ChatInputCommandAcceptedPayload} payload The contextual payload\n\t */\n\tChatInputCommandAccepted: 'chatInputCommandAccepted' as const,\n\n\t/**\n\t * Emitted directly before a chat input command is run.\n\t * @param {CommandInteraction} interaction The interaction that executed the command\n\t * @param {ChatInputCommand} command The command that is being run\n\t * @param {ChatInputCommandRunPayload} payload The contextual payload\n\t */\n\tChatInputCommandRun: 'chatInputCommandRun' as const,\n\t/**\n\t * Emitted after a chat input command runs successfully.\n\t * @param {ChatInputCommandSuccessPayload} payload The contextual payload\n\t */\n\tChatInputCommandSuccess: 'chatInputCommandSuccess' as const,\n\t/**\n\t * Emitted after a chat input command runs unsuccesfully.\n\t * @param {*} error The error that was thrown\n\t * @param {ChatInputCommandErrorPayload} payload The contextual payload\n\t */\n\tChatInputCommandError: 'chatInputCommandError' as const,\n\t/**\n\t * Emitted directly after a chat input command finished running, regardless of the outcome.\n\t * @param {Interaction} interaction The interaction that executed the command\n\t * @param {ChatInputCommand} command The command that finished running\n\t * @param {ChatInputCommandFinishPayload} payload The contextual payload\n\t */\n\tChatInputCommandFinish: 'chatInputCommandFinish' as const,\n\n\t// Context menu chain\n\t/**\n\t * Emitted when a context menu interaction is recieved.\n\t * @param {ContextMenuInteraction} interaction The interaction that was recieved.\n\t */\n\tPossibleContextMenuCommand: 'possibleContextMenuCommand' as const,\n\t/**\n\t * Emitted when the name of a sent context menu command does not match any loaded commands.\n\t * @param {UnknownContextMenuCommandPayload} payload The contextual payload\n\t */\n\tUnknownContextMenuCommand: 'unknownContextMenuCommand' as const,\n\t/**\n\t * Emitted when a chat input command is executed but a `contextMenuRun` method is not found.\n\t * @param {CommandDoesNotHaveContextMenuCommandHandlerPayload} payload The contextual payload\n\t */\n\tCommandDoesNotHaveContextMenuCommandHandler: 'commandDoesNotHaveContextMenuCommandHandler' as const,\n\t/**\n\t * Emitted before the `contextMenuRun` method of a command is run.\n\t * @param {PreContextMenuCommandRunPayload} payload The contextual payload\n\t */\n\tPreContextMenuCommandRun: 'preContextMenuCommandRun' as const,\n\n\t/**\n\t * Emitted when a precondition denies a context menu command from being run.\n\t * @param {UserError} error The error reported by the precondition\n\t * @param {ContextMenuCommandDeniedPayload} payload The contextual payload\n\t */\n\tContextMenuCommandDenied: 'contextMenuCommandDenied' as const,\n\t/**\n\t * Emitted when a context menu command passes all precondition checks, if any.\n\t * @param {ContextMenuCommandAcceptedPayload} payload The contextual payload\n\t */\n\tContextMenuCommandAccepted: 'contextMenuCommandAccepted' as const,\n\n\t/**\n\t * Emitted directly before a context menu command is run.\n\t * @param {ContextMenuInteraction} interaction The interaction that executed the command\n\t * @param {ContextMenuCommand} command The command that is being run\n\t * @param {ContextMenuCommandRunPayload} payload The contextual payload\n\t */\n\tContextMenuCommandRun: 'contextMenuCommandRun' as const,\n\t/**\n\t * Emitted after a context menu command runs successfully.\n\t * @param {ContextMenuCommandSuccessPayload} payload The contextual payload\n\t */\n\tContextMenuCommandSuccess: 'contextMenuCommandSuccess' as const,\n\t/**\n\t * Emitted after a context menu command runs unsuccesfully.\n\t * @param {*} error The error that was thrown\n\t * @param {ContextMenuCommandErrorPayload} payload The contextual payload\n\t */\n\tContextMenuCommandError: 'contextMenuCommandError' as const,\n\t/**\n\t * Emitted directly after a context menu command finished running, regardless of the outcome.\n\t * @param {Interaction} interaction The interaction that executed the command\n\t * @param {ContextMenuCommand} command The command that finished running\n\t * @param {ContextMenuCommandFinishPayload} payload The contextual payload\n\t */\n\tContextMenuCommandFinish: 'contextMenuCommandFinish' as const\n\n\t// #endregion Sapphire events\n};\n\nexport interface IPieceError {\n\tpiece: Piece;\n}\n\nexport interface ListenerErrorPayload extends IPieceError {\n\tpiece: Listener;\n}\n\nexport interface UnknownMessageCommandNamePayload {\n\tmessage: Message;\n\tprefix: string | RegExp;\n\tcommandPrefix: string;\n}\n\nexport interface CommandDoesNotHaveMessageCommandHandler {\n\tmessage: Message;\n\tprefix: string | RegExp;\n\tcommandPrefix: string;\n\tcommand: Command;\n}\n\nexport interface UnknownMessageCommandPayload extends UnknownMessageCommandNamePayload {\n\tcommandName: string;\n}\n\nexport interface IMessageCommandPayload {\n\tmessage: Message;\n\tcommand: MessageCommand;\n}\n\nexport interface PreMessageCommandRunPayload extends MessageCommandDeniedPayload {}\n\nexport interface MessageCommandDeniedPayload extends IMessageCommandPayload {\n\tparameters: string;\n\tcontext: MessageCommand.RunContext;\n}\n\nexport interface MessageCommandAcceptedPayload extends IMessageCommandPayload {\n\tparameters: string;\n\tcontext: MessageCommand.RunContext;\n}\n\nexport interface MessageCommandRunPayload extends MessageCommandAcceptedPayload {\n\targs: unknown;\n}\n\nexport interface MessageCommandFinishPayload extends MessageCommandRunPayload {\n\tsuccess: boolean;\n\tduration: number;\n}\n\nexport interface MessageCommandErrorPayload extends MessageCommandRunPayload {\n\tduration: number;\n}\n\nexport interface MessageCommandSuccessPayload extends MessageCommandRunPayload {\n\tresult: unknown;\n\tduration: number;\n}\n\nexport interface MessageCommandTypingErrorPayload extends MessageCommandRunPayload {}\n\nexport interface UnknownChatInputCommandPayload {\n\tinteraction: CommandInteraction;\n\tcontext: ChatInputCommandContext;\n}\n\nexport interface CommandDoesNotHaveChatInputCommandHandlerPayload {\n\tinteraction: CommandInteraction;\n\tcommand: Command;\n\tcontext: ChatInputCommandContext;\n}\n\nexport interface IChatInputCommandPayload {\n\tinteraction: CommandInteraction;\n\tcommand: ChatInputCommand;\n}\n\nexport interface PreChatInputCommandRunPayload extends IChatInputCommandPayload {\n\tcontext: ChatInputCommandContext;\n}\n\nexport interface ChatInputCommandDeniedPayload extends IChatInputCommandPayload {\n\tcontext: ChatInputCommandContext;\n}\n\nexport interface ChatInputCommandAcceptedPayload extends PreChatInputCommandRunPayload {}\n\nexport interface ChatInputCommandRunPayload extends ChatInputCommandAcceptedPayload {}\n\nexport interface ChatInputCommandFinishPayload extends ChatInputCommandAcceptedPayload {\n\tsuccess: boolean;\n\tduration: number;\n}\n\nexport interface ChatInputCommandSuccessPayload extends ChatInputCommandRunPayload {\n\tresult: unknown;\n\tduration: number;\n}\n\nexport interface ChatInputCommandErrorPayload extends IChatInputCommandPayload {\n\tduration: number;\n}\n\nexport interface UnknownContextMenuCommandPayload {\n\tinteraction: ContextMenuInteraction;\n\tcontext: ContextMenuCommandContext;\n}\n\nexport interface CommandDoesNotHaveContextMenuCommandHandlerPayload {\n\tinteraction: ContextMenuInteraction;\n\tcontext: ContextMenuCommandContext;\n\tcommand: Command;\n}\n\nexport interface IContextMenuCommandPayload {\n\tinteraction: ContextMenuInteraction;\n\tcommand: ContextMenuCommand;\n}\n\nexport interface PreContextMenuCommandRunPayload extends IContextMenuCommandPayload {\n\tcontext: ContextMenuCommandContext;\n}\n\nexport interface ContextMenuCommandDeniedPayload extends IContextMenuCommandPayload {\n\tcontext: ContextMenuCommandContext;\n}\n\nexport interface ContextMenuCommandAcceptedPayload extends PreContextMenuCommandRunPayload {}\n\nexport interface ContextMenuCommandRunPayload extends ContextMenuCommandAcceptedPayload {}\n\nexport interface ContextMenuCommandFinishPayload extends ContextMenuCommandAcceptedPayload {\n\tsuccess: boolean;\n\tduration: number;\n}\n\nexport interface ContextMenuCommandSuccessPayload extends ContextMenuCommandRunPayload {\n\tresult: unknown;\n\tduration: number;\n}\n\nexport interface ContextMenuCommandErrorPayload extends IContextMenuCommandPayload {\n\tduration: number;\n}\n\nexport interface IInteractionHandlerPayload {\n\tinteraction: Interaction;\n\thandler: InteractionHandler;\n}\n\nexport interface InteractionHandlerParseError extends IInteractionHandlerPayload {}\n\nexport interface InteractionHandlerError extends IInteractionHandlerPayload {}\n\nexport interface AutocompleteInteractionPayload {\n\tinteraction: AutocompleteInteraction;\n\tcommand: AutocompleteCommand;\n\tcontext: AutocompleteCommandContext;\n}\n\ndeclare module 'discord.js' {\n\tinterface ClientEvents {\n\t\t// #region Sapphire load cycle events\n\t\t[Events.PieceUnload]: [store: Store<Piece>, piece: Piece];\n\t\t[Events.PiecePostLoad]: [store: Store<Piece>, piece: Piece];\n\n\t\t[Events.ListenerError]: [error: unknown, payload: ListenerErrorPayload];\n\t\t[Events.CommandApplicationCommandRegistryError]: [error: unknown, command: Command];\n\n\t\t[Events.PreMessageParsed]: [message: Message];\n\t\t[Events.MentionPrefixOnly]: [message: Message];\n\t\t[Events.NonPrefixedMessage]: [message: Message];\n\t\t[Events.PrefixedMessage]: [message: Message, prefix: string | RegExp];\n\n\t\t[Events.UnknownMessageCommandName]: [payload: UnknownMessageCommandNamePayload];\n\t\t[Events.UnknownMessageCommand]: [payload: UnknownMessageCommandPayload];\n\t\t[Events.CommandDoesNotHaveMessageCommandHandler]: [payload: CommandDoesNotHaveMessageCommandHandler];\n\t\t[Events.PreMessageCommandRun]: [payload: PreMessageCommandRunPayload];\n\n\t\t[Events.MessageCommandDenied]: [error: UserError, payload: MessageCommandDeniedPayload];\n\t\t[Events.MessageCommandAccepted]: [payload: MessageCommandAcceptedPayload];\n\n\t\t[Events.MessageCommandRun]: [message: Message, command: Command, payload: MessageCommandRunPayload];\n\t\t[Events.MessageCommandSuccess]: [payload: MessageCommandSuccessPayload];\n\t\t[Events.MessageCommandError]: [error: unknown, payload: MessageCommandErrorPayload];\n\t\t[Events.MessageCommandFinish]: [message: Message, command: Command, payload: MessageCommandFinishPayload];\n\n\t\t[Events.MessageCommandTypingError]: [error: Error, payload: MessageCommandTypingErrorPayload];\n\n\t\t[Events.PluginLoaded]: [hook: PluginHook, name: string | undefined];\n\n\t\t[Events.InteractionHandlerParseError]: [error: unknown, payload: InteractionHandlerParseError];\n\t\t[Events.InteractionHandlerError]: [error: unknown, payload: InteractionHandlerError];\n\n\t\t[Events.PossibleAutocompleteInteraction]: [interaction: AutocompleteInteraction];\n\t\t[Events.CommandAutocompleteInteractionError]: [error: unknown, payload: AutocompleteInteractionPayload];\n\t\t[Events.CommandAutocompleteInteractionSuccess]: [payload: AutocompleteInteractionPayload];\n\n\t\t// Chat input command chain\n\t\t[Events.PossibleChatInputCommand]: [interaction: CommandInteraction];\n\t\t[Events.UnknownChatInputCommand]: [payload: UnknownChatInputCommandPayload];\n\t\t[Events.CommandDoesNotHaveChatInputCommandHandler]: [payload: CommandDoesNotHaveChatInputCommandHandlerPayload];\n\t\t[Events.PreChatInputCommandRun]: [payload: PreChatInputCommandRunPayload];\n\n\t\t[Events.ChatInputCommandDenied]: [error: UserError, payload: ChatInputCommandDeniedPayload];\n\t\t[Events.ChatInputCommandAccepted]: [payload: ChatInputCommandAcceptedPayload];\n\n\t\t[Events.ChatInputCommandRun]: [interaction: CommandInteraction, command: ChatInputCommand, payload: ChatInputCommandRunPayload];\n\t\t[Events.ChatInputCommandSuccess]: [payload: ChatInputCommandSuccessPayload];\n\t\t[Events.ChatInputCommandError]: [error: unknown, payload: ChatInputCommandErrorPayload];\n\t\t[Events.ChatInputCommandFinish]: [interaction: CommandInteraction, command: ChatInputCommand, payload: ChatInputCommandFinishPayload];\n\n\t\t// Context menu command chain\n\t\t[Events.PossibleContextMenuCommand]: [interaction: ContextMenuInteraction];\n\t\t[Events.UnknownContextMenuCommand]: [payload: UnknownContextMenuCommandPayload];\n\t\t[Events.CommandDoesNotHaveContextMenuCommandHandler]: [payload: CommandDoesNotHaveContextMenuCommandHandlerPayload];\n\t\t[Events.PreContextMenuCommandRun]: [payload: PreContextMenuCommandRunPayload];\n\n\t\t[Events.ContextMenuCommandDenied]: [error: UserError, payload: ContextMenuCommandDeniedPayload];\n\t\t[Events.ContextMenuCommandAccepted]: [payload: ContextMenuCommandAcceptedPayload];\n\n\t\t[Events.ContextMenuCommandRun]: [interaction: ContextMenuInteraction, command: ContextMenuCommand, payload: ContextMenuCommandRunPayload];\n\t\t[Events.ContextMenuCommandSuccess]: [payload: ContextMenuCommandSuccessPayload];\n\t\t[Events.ContextMenuCommandError]: [error: unknown, payload: ContextMenuCommandErrorPayload];\n\t\t[Events.ContextMenuCommandFinish]: [\n\t\t\tinteraction: ContextMenuInteraction,\n\t\t\tcommand: ContextMenuCommand,\n\t\t\tpayload: ContextMenuCommandFinishPayload\n\t\t];\n\n\t\t// #endregion Sapphire load cycle events\n\n\t\t// #region Termination\n\t\t[K: string]: unknown[];\n\t\t// #endregion Termination\n\t}\n}\n"]}