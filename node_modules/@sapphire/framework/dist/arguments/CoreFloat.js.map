{"version":3,"sources":["../../src/arguments/CoreFloat.ts"],"names":[],"mappings":";;;;AACA,SAAS,mBAAmB;AAC5B,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AAElB,IAAM,eAAN,cAA2B,SAAiB;AAAA,EAO3C,YAAY,SAAuB;AACzC,UAAM,SAAS,EAAE,MAAM,QAAQ,CAAC;AAPjC,SAAiB,WAAW;AAAA,MAC3B,CAAC,YAAY,wBAAwB,CAAC,EAAE,QAAQ,MAAwB,yCAAyC;AAAA,MACjH,CAAC,YAAY,wBAAwB,CAAC,EAAE,QAAQ,MAAwB,sCAAsC;AAAA,MAC9G,CAAC,YAAY,qBAAqB,MAAM;AAAA,IACzC;AAAA,EAIA;AAAA,EAEO,IAAI,WAAmB,SAAoD;AACjF,UAAM,WAAW,aAAa,WAAW,EAAE,SAAS,QAAQ,SAAS,SAAS,QAAQ,QAAQ,CAAC;AAC/F,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS,KAAK,SAAS,YAAY,OAAO;AAAA,QAC1C;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAtBa","sourcesContent":["import type { PieceContext } from '@sapphire/pieces';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { resolveFloat } from '../lib/resolvers/float';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<number> {\n\tprivate readonly messages = {\n\t\t[Identifiers.ArgumentFloatTooSmall]: ({ minimum }: Argument.Context) => `The given number must be greater than ${minimum}.`,\n\t\t[Identifiers.ArgumentFloatTooLarge]: ({ maximum }: Argument.Context) => `The given number must be less than ${maximum}.`,\n\t\t[Identifiers.ArgumentFloatError]: () => 'The argument did not resolve to a valid decimal.'\n\t} as const;\n\n\tpublic constructor(context: PieceContext) {\n\t\tsuper(context, { name: 'float' });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<number> {\n\t\tconst resolved = resolveFloat(parameter, { minimum: context.minimum, maximum: context.maximum });\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: this.messages[identifier](context),\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n"]}