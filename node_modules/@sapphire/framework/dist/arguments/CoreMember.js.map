{"version":3,"sources":["../../src/arguments/CoreMember.ts"],"names":[],"mappings":";;;;AAEA,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AAElB,IAAM,eAAN,cAA2B,SAAsB;AAAA,EAChD,YAAY,SAAuB;AACzC,UAAM,SAAS,EAAE,MAAM,SAAS,CAAC;AAAA,EAClC;AAAA,EAEA,MAAa,IAAI,WAAmB,SAA8D;AACjG,UAAM,EAAE,MAAM,IAAI,QAAQ;AAC1B,QAAI,CAAC,OAAO;AACX,aAAO,KAAK,MAAM;AAAA,QACjB;AAAA,QACA,YAAY,YAAY;AAAA,QACxB,SAAS;AAAA,QACT;AAAA,MACD,CAAC;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,cAAc,WAAW,KAAK;AACrD,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT,SAAS,EAAE,GAAG,SAAS,MAAM;AAAA,MAC9B,CAAC;AAAA,IACF;AAAA,EACD;AACD;AA1Ba","sourcesContent":["import type { PieceContext } from '@sapphire/pieces';\nimport type { GuildMember } from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { resolveMember } from '../lib/resolvers/member';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<GuildMember> {\n\tpublic constructor(context: PieceContext) {\n\t\tsuper(context, { name: 'member' });\n\t}\n\n\tpublic async run(parameter: string, context: Argument.Context): Argument.AsyncResult<GuildMember> {\n\t\tconst { guild } = context.message;\n\t\tif (!guild) {\n\t\t\treturn this.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier: Identifiers.ArgumentMemberMissingGuild,\n\t\t\t\tmessage: 'This command can only be used in a server.',\n\t\t\t\tcontext\n\t\t\t});\n\t\t}\n\n\t\tconst resolved = await resolveMember(parameter, guild);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The given argument did not resolve to a server member.',\n\t\t\t\tcontext: { ...context, guild }\n\t\t\t})\n\t\t);\n\t}\n}\n"]}