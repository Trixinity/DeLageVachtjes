{"version":3,"sources":["../../src/arguments/CoreUser.ts"],"names":[],"mappings":";;;;AAEA,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB;AAElB,IAAM,eAAN,cAA2B,SAAe;AAAA,EACzC,YAAY,SAAuB;AACzC,UAAM,SAAS,EAAE,MAAM,OAAO,CAAC;AAAA,EAChC;AAAA,EAEA,MAAa,IAAI,WAAmB,SAAuD;AAC1F,UAAM,WAAW,MAAM,YAAY,SAAS;AAC5C,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAhBa","sourcesContent":["import type { PieceContext } from '@sapphire/pieces';\nimport type { User } from 'discord.js';\nimport { resolveUser } from '../lib/resolvers/user';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<User> {\n\tpublic constructor(context: PieceContext) {\n\t\tsuper(context, { name: 'user' });\n\t}\n\n\tpublic async run(parameter: string, context: Argument.Context): Argument.AsyncResult<User> {\n\t\tconst resolved = await resolveUser(parameter);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The given argument did not resolve to a Discord user.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n"]}