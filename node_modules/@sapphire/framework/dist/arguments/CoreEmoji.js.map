{"version":3,"sources":["../../src/arguments/CoreEmoji.ts"],"names":[],"mappings":";;;;AACA,SAAS,oBAAsC;AAC/C,SAAS,gBAAgB;AAElB,IAAM,eAAN,cAA2B,SAAsB;AAAA,EAChD,YAAY,SAAuB;AACzC,UAAM,SAAS,EAAE,MAAM,QAAQ,CAAC;AAAA,EACjC;AAAA,EAEO,IAAI,WAAmB,SAAyD;AACtF,UAAM,WAAW,aAAa,SAAS;AACvC,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAhBa","sourcesContent":["import type { PieceContext } from '@sapphire/pieces';\nimport { resolveEmoji, type EmojiObject } from '../lib/resolvers/emoji';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<EmojiObject> {\n\tpublic constructor(context: PieceContext) {\n\t\tsuper(context, { name: 'emoji' });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<EmojiObject> {\n\t\tconst resolved = resolveEmoji(parameter);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The argument did not resolve to an emoji.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n"]}