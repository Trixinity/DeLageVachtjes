{"version":3,"sources":["../../../src/optional-listeners/message-command-listeners/CoreMessageCommandTyping.ts"],"names":[],"mappings":";;;;AAEA,SAAS,gBAAgB;AACzB,SAAS,cAA6C;AAE/C,IAAM,eAAN,cAA2B,SAA0C;AAAA,EACpE,YAAY,SAA2B;AAC7C,UAAM,SAAS,EAAE,OAAO,OAAO,kBAAkB,CAAC;AAClD,SAAK,UAAU,KAAK,UAAU,OAAO,QAAQ,UAAU;AAAA,EACxD;AAAA,EAEA,MAAa,IAAI,SAAkB,SAAyB,SAAmC;AAC9F,QAAI,CAAC,QAAQ;AAAQ;AAErB,QAAI;AACH,YAAM,QAAQ,QAAQ,WAAW;AAAA,IAClC,SAAS,OAAP;AACD,cAAQ,OAAO,KAAK,OAAO,2BAA2B,OAAgB,EAAE,GAAG,SAAS,SAAS,QAAQ,CAAC;AAAA,IACvG;AAAA,EACD;AACD;AAfa","sourcesContent":["import type { Message } from 'discord.js';\nimport type { MessageCommand } from '../../lib/structures/Command';\nimport { Listener } from '../../lib/structures/Listener';\nimport { Events, type MessageCommandRunPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.MessageCommandRun> {\n\tpublic constructor(context: Listener.Context) {\n\t\tsuper(context, { event: Events.MessageCommandRun });\n\t\tthis.enabled = this.container.client.options.typing ?? false;\n\t}\n\n\tpublic async run(message: Message, command: MessageCommand, payload: MessageCommandRunPayload) {\n\t\tif (!command.typing) return;\n\n\t\ttry {\n\t\t\tawait message.channel.sendTyping();\n\t\t} catch (error) {\n\t\t\tmessage.client.emit(Events.MessageCommandTypingError, error as Error, { ...payload, command, message });\n\t\t}\n\t}\n}\n"]}