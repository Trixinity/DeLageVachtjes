{"version":3,"sources":["../../../src/optional-listeners/error-listeners/CoreListenerError.ts"],"names":[],"mappings":";;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,cAAyC;AAE3C,IAAM,YAAN,cAAwB,SAAsC;AAAA,EAC7D,YAAY,SAA2B;AAC7C,UAAM,SAAS,EAAE,OAAO,OAAO,cAAc,CAAC;AAAA,EAC/C;AAAA,EAEO,IAAI,OAAgB,SAA+B;AACzD,UAAM,EAAE,MAAM,OAAO,SAAS,IAAI,QAAQ;AAC1C,SAAK,UAAU,OAAO,MAAM,wCAAwC,oBAAoB,OAAO,KAAK,eAAe,SAAS,SAAS,KAAK;AAAA,EAC3I;AACD;AATa","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type ListenerErrorPayload } from '../../lib/types/Events';\n\nexport class CoreEvent extends Listener<typeof Events.ListenerError> {\n\tpublic constructor(context: Listener.Context) {\n\t\tsuper(context, { event: Events.ListenerError });\n\t}\n\n\tpublic run(error: unknown, context: ListenerErrorPayload) {\n\t\tconst { name, event, location } = context.piece;\n\t\tthis.container.logger.error(`Encountered error on event listener \"${name}\" for event \"${String(event)}\" at path \"${location.full}\"`, error);\n\t}\n}\n"]}