{"version":3,"sources":["../../../src/optional-listeners/error-listeners/CoreChatInputCommandError.ts"],"names":[],"mappings":";;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,cAAiD;AAEnD,IAAM,YAAN,cAAwB,SAA8C;AAAA,EACrE,YAAY,SAA2B;AAC7C,UAAM,SAAS,EAAE,OAAO,OAAO,sBAAsB,CAAC;AAAA,EACvD;AAAA,EAEO,IAAI,OAAgB,SAAuC;AACjE,UAAM,EAAE,MAAM,SAAS,IAAI,QAAQ;AACnC,SAAK,UAAU,OAAO,MAAM,4CAA4C,kBAAkB,SAAS,SAAS,KAAK;AAAA,EAClH;AACD;AATa","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type ChatInputCommandErrorPayload } from '../../lib/types/Events';\n\nexport class CoreEvent extends Listener<typeof Events.ChatInputCommandError> {\n\tpublic constructor(context: Listener.Context) {\n\t\tsuper(context, { event: Events.ChatInputCommandError });\n\t}\n\n\tpublic run(error: unknown, context: ChatInputCommandErrorPayload) {\n\t\tconst { name, location } = context.command;\n\t\tthis.container.logger.error(`Encountered error on chat input command \"${name}\" at path \"${location.full}\"`, error);\n\t}\n}\n"]}