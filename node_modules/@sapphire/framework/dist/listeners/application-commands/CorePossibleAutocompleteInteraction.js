'use strict';

var Listener_js = require('../../lib/structures/Listener.js');
var Events_js = require('../../lib/types/Events.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var CoreListener = class extends Listener_js.Listener {
  constructor(context) {
    super(context, { event: Events_js.Events.PossibleAutocompleteInteraction });
  }
  async run(interaction) {
    const { stores } = this.container;
    const commandStore = stores.get("commands");
    const command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);
    if (command?.autocompleteRun) {
      try {
        await command.autocompleteRun(interaction);
        this.container.client.emit(Events_js.Events.CommandAutocompleteInteractionSuccess, {
          command,
          context: { commandId: interaction.commandId, commandName: interaction.commandName },
          interaction
        });
      } catch (err) {
        this.container.client.emit(Events_js.Events.CommandAutocompleteInteractionError, err, {
          command,
          context: { commandId: interaction.commandId, commandName: interaction.commandName },
          interaction
        });
      }
      return;
    }
    await this.container.stores.get("interaction-handlers").run(interaction);
  }
};
__name(CoreListener, "CoreListener");

exports.CoreListener = CoreListener;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CorePossibleAutocompleteInteraction.js.map