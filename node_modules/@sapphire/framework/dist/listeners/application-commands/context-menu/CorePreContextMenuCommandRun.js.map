{"version":3,"sources":["../../../../src/listeners/application-commands/context-menu/CorePreContextMenuCommandRun.ts"],"names":[],"mappings":";;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,cAA+C;AAEjD,IAAM,eAAN,cAA2B,SAAiD;AAAA,EAC3E,YAAY,SAA2B;AAC7C,UAAM,SAAS,EAAE,OAAO,OAAO,yBAAyB,CAAC;AAAA,EAC1D;AAAA,EAEA,MAAa,IAAI,SAA0C;AAC1D,UAAM,EAAE,SAAS,YAAY,IAAI;AAGjC,UAAM,eAAe,MAAM,KAAK,UAAU,OAAO,IAAI,eAAe,EAAE,eAAe,aAAa,SAAS,OAAc;AACzH,QAAI,aAAa,MAAM,GAAG;AACzB,WAAK,UAAU,OAAO,KAAK,OAAO,0BAA0B,aAAa,UAAU,GAAG,OAAO;AAC7F;AAAA,IACD;AAGA,UAAM,cAAc,MAAM,QAAQ,cAAc,eAAe,aAAa,SAAS,OAAc;AACnG,QAAI,YAAY,MAAM,GAAG;AACxB,WAAK,UAAU,OAAO,KAAK,OAAO,0BAA0B,YAAY,UAAU,GAAG,OAAO;AAC5F;AAAA,IACD;AAEA,SAAK,UAAU,OAAO,KAAK,OAAO,4BAA4B,OAAO;AAAA,EACtE;AACD;AAxBa","sourcesContent":["import { Listener } from '../../../lib/structures/Listener';\nimport { Events, PreContextMenuCommandRunPayload } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreContextMenuCommandRun> {\n\tpublic constructor(context: Listener.Context) {\n\t\tsuper(context, { event: Events.PreContextMenuCommandRun });\n\t}\n\n\tpublic async run(payload: PreContextMenuCommandRunPayload) {\n\t\tconst { command, interaction } = payload;\n\n\t\t// Run global preconditions:\n\t\tconst globalResult = await this.container.stores.get('preconditions').contextMenuRun(interaction, command, payload as any);\n\t\tif (globalResult.isErr()) {\n\t\t\tthis.container.client.emit(Events.ContextMenuCommandDenied, globalResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\t// Run command-specific preconditions:\n\t\tconst localResult = await command.preconditions.contextMenuRun(interaction, command, payload as any);\n\t\tif (localResult.isErr()) {\n\t\t\tthis.container.client.emit(Events.ContextMenuCommandDenied, localResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.container.client.emit(Events.ContextMenuCommandAccepted, payload);\n\t}\n}\n"]}