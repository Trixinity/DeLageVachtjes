{"version":3,"sources":["../../src/listeners/CoreInteractionCreate.ts"],"names":[],"mappings":";;;;AACA,SAAS,gBAAgB;AACzB,SAAS,cAAc;AAEhB,IAAM,YAAN,cAAwB,SAA0C;AAAA,EACjE,YAAY,SAA2B;AAC7C,UAAM,SAAS,EAAE,OAAO,OAAO,kBAAkB,CAAC;AAAA,EACnD;AAAA,EAEA,MAAa,IAAI,aAA0B;AAC1C,QAAI,YAAY,UAAU,GAAG;AAC5B,WAAK,UAAU,OAAO,KAAK,OAAO,0BAA0B,WAAW;AAAA,IACxE,WAAW,YAAY,cAAc,GAAG;AACvC,WAAK,UAAU,OAAO,KAAK,OAAO,4BAA4B,WAAW;AAAA,IAC1E,WAAW,YAAY,eAAe,GAAG;AACxC,WAAK,UAAU,OAAO,KAAK,OAAO,iCAAiC,WAAW;AAAA,IAC/E,WAAW,YAAY,mBAAmB,KAAK,YAAY,cAAc,GAAG;AAC3E,YAAM,KAAK,UAAU,OAAO,IAAI,sBAAsB,EAAE,IAAI,WAAW;AAAA,IACxE,OAAO;AACN,WAAK,UAAU,OAAO,KAAK,aAAa,KAAK,SAAS,qCAAqC,YAAY,YAAY,MAAM;AAAA,IAC1H;AAAA,EACD;AACD;AAlBa","sourcesContent":["import type { Interaction } from 'discord.js';\nimport { Listener } from '../lib/structures/Listener';\nimport { Events } from '../lib/types/Events';\n\nexport class CoreEvent extends Listener<typeof Events.InteractionCreate> {\n\tpublic constructor(context: Listener.Context) {\n\t\tsuper(context, { event: Events.InteractionCreate });\n\t}\n\n\tpublic async run(interaction: Interaction) {\n\t\tif (interaction.isCommand()) {\n\t\t\tthis.container.client.emit(Events.PossibleChatInputCommand, interaction);\n\t\t} else if (interaction.isContextMenu()) {\n\t\t\tthis.container.client.emit(Events.PossibleContextMenuCommand, interaction);\n\t\t} else if (interaction.isAutocomplete()) {\n\t\t\tthis.container.client.emit(Events.PossibleAutocompleteInteraction, interaction);\n\t\t} else if (interaction.isMessageComponent() || interaction.isModalSubmit()) {\n\t\t\tawait this.container.stores.get('interaction-handlers').run(interaction);\n\t\t} else {\n\t\t\tthis.container.logger.warn(`[Sapphire ${this.location.name}] Unhandled interaction type: ${interaction.constructor.name}`);\n\t\t}\n\t}\n}\n"]}