'use strict';

var discord_js = require('discord.js');
var Identifiers_js = require('../lib/errors/Identifiers.js');
var Precondition_js = require('../lib/structures/Precondition.js');
var ClientPermissions_js = require('./ClientPermissions.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var CorePrecondition = class extends Precondition_js.AllFlowsPrecondition {
  constructor() {
    super(...arguments);
    this.dmChannelPermissions = new discord_js.Permissions(
      ~new discord_js.Permissions([
        "ADD_REACTIONS",
        "ATTACH_FILES",
        "EMBED_LINKS",
        "READ_MESSAGE_HISTORY",
        "SEND_MESSAGES",
        "USE_EXTERNAL_EMOJIS",
        "VIEW_CHANNEL",
        "USE_EXTERNAL_STICKERS",
        "MENTION_EVERYONE"
      ]).bitfield & discord_js.Permissions.ALL
    ).freeze();
  }
  messageRun(message, _command, context) {
    const required = context.permissions ?? new discord_js.Permissions();
    const channel = message.channel;
    const permissions = message.guild ? channel.permissionsFor(message.author) : this.dmChannelPermissions;
    return this.sharedRun(required, permissions, "message");
  }
  chatInputRun(interaction, _command, context) {
    const required = context.permissions ?? new discord_js.Permissions();
    const permissions = interaction.guildId ? interaction.memberPermissions : this.dmChannelPermissions;
    return this.sharedRun(required, permissions, "chat input");
  }
  contextMenuRun(interaction, _command, context) {
    const required = context.permissions ?? new discord_js.Permissions();
    const permissions = interaction.guildId ? interaction.memberPermissions : this.dmChannelPermissions;
    return this.sharedRun(required, permissions, "context menu");
  }
  sharedRun(requiredPermissions, availablePermissions, commandType) {
    if (!availablePermissions) {
      return this.error({
        identifier: Identifiers_js.Identifiers.PreconditionUserPermissionsNoPermissions,
        message: `I was unable to resolve the end-user's permissions in the ${commandType} command invocation channel.`
      });
    }
    const missing = availablePermissions.missing(requiredPermissions);
    return missing.length === 0 ? this.ok() : this.error({
      identifier: Identifiers_js.Identifiers.PreconditionUserPermissions,
      message: `You are missing the following permissions to run this command: ${missing.map((perm) => ClientPermissions_js.CorePrecondition.readablePermissions[perm]).join(", ")}`,
      context: { missing }
    });
  }
};
__name(CorePrecondition, "CorePrecondition");

exports.CorePrecondition = CorePrecondition;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=UserPermissions.js.map